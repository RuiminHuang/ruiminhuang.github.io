<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何为RPi交叉编译特定版本的支持v4l2的.ko以及.dtb</title>
      <link href="/2021/10/07/ru-he-wei-rpi-jiao-cha-bian-yi-te-ding-ban-ben-de-zhi-chi-v4l2-de.ko-yi-ji.dtb/"/>
      <url>/2021/10/07/ru-he-wei-rpi-jiao-cha-bian-yi-te-ding-ban-ben-de-zhi-chi-v4l2-de.ko-yi-ji.dtb/</url>
      
        <content type="html"><![CDATA[<h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0 背景"></a>0 背景</h2><p>我在以前一个版本的64bit树莓派系统上，搭建了很多环境，现在，这个64bit的树莓派系统需要接入IMX385，目前只有v4l2这种方案(64bit的树莓派系统删除了一些库，树莓派原生相机也就不支持)。</p><p>但悲催的是，目前veye在Github提供的源码，只支持内核版本为5.10.92-v8+的树莓派，也就是只支持比较新版本的树莓派进行，然而我的树莓派系统内核版本为5.10.63-v8+，veye官方的源码也就不支持。</p><blockquote><p>解决方法一：更换内核版本为5.10.92-v8+的树莓派系统，但有点不太现实，我搭建了很多环境，特别是很多深度学习的推理环境，这样再折腾明显不现实。</p></blockquote><blockquote><p>解决方法二：交叉编译一个支持5.10.63-v8+的.ko以及.dtb，这个工作量会少很多，接下来就开始。</p></blockquote><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><blockquote><p> 开发环境准备，在虚拟机Ubuntu18.04中操作</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">bc</span> bison flex libssl-dev <span class="token function">make</span> libc6-dev libncurses5-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> crossbuild-essential-arm64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>确认自己的树莓派上的piOS版本，以下动作在树莓派上面完成</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320223036.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/pi/ko_dev<span class="token function">cp</span> /usr/share/doc/raspberrypi-bootloader/changelog.Debian.gz ./<span class="token function">vi</span> changelog.Debian<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320223131.png"></p><blockquote><p>从下面的连接下载源码</p></blockquote><p><a href="http://github.com/raspberrypi/linux/tags">Github源码链接</a></p><p><img src="http://pic.huangruimin.tech/20220320223241.png"></p><blockquote><p>将获取到的源码放虚拟机上</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320222937.png"></p><h2 id="2-给源代码打补丁"><a href="#2-给源代码打补丁" class="headerlink" title="2 给源代码打补丁"></a>2 给源代码打补丁</h2><blockquote><p>以下动作在虚拟机中进行，打补丁</p></blockquote><blockquote><p>进入到第一个需要打补丁的地方</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./drivers/media/i2c/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>先删掉要被替换的文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ./Kconfig<span class="token function">rm</span> <span class="token parameter variable">-rf</span> ./Makefile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>将以下文件copy到虚拟机中</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320222018.png"></p><blockquote><p>继续拷贝文件</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320222304.png"></p><blockquote><p>进入到第二个需要打补丁的地方</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./arch/arm/boot/dts/overlays<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>删除需要被替换的文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ./Makefile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>拷贝文件</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320222801.png"></p><blockquote><p>其中要去替换的Makefile中是多了以下内容</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">csimx307-dual-cm4.dtbo<span class="token punctuation">\</span>csimx307.dtbo<span class="token punctuation">\</span>cssc132-dual-cm4.dtbo<span class="token punctuation">\</span>cssc132.dtbo<span class="token punctuation">\</span>veye327-dual-cm4.dtbo<span class="token punctuation">\</span>veye327.dtbo<span class="token punctuation">\</span>veyecam2m-dual-cm4.dtbo<span class="token punctuation">\</span>veyecam2m.dtbo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-开始编译源码"><a href="#3-开始编译源码" class="headerlink" title="3 开始编译源码"></a>3 开始编译源码</h2><blockquote><p>首先是编译准备</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">KERNEL</span><span class="token operator">=</span>kernel8<span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm64 <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>aarch64-linux-gnu- bcm2711_defconfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>然后是增加编译选项</p><blockquote><p>5.10版本kernel的路径是Device Drivers –&gt; Multimedia Support –&gt; Media ancillary drivers –&gt; Camera sensor devices</p></blockquote></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm64 <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>aarch64-linux-gnu- menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320223827.png"></p><blockquote><p>接着是开始编译内核，模块，设备树</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm64 <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>aarch64-linux-gnu- Image modules dtbs <span class="token parameter variable">-j4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-将编译结果导出"><a href="#4-将编译结果导出" class="headerlink" title="4 将编译结果导出"></a>4 将编译结果导出</h2><blockquote><p>导出模块文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./drivers/media/i2c/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>以下为需要导出的文件</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320224431.png"></p><blockquote><p>导出设备树二进制文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./arch/arm/boot/dts/overlays<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>以下为需要导出的二进制文件</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320224801.png"></p><blockquote><p>最终导出的驱动模块文件，设备树二进制文件，放在PC的下列文件夹中</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320224908.png"></p><blockquote><p>需要将最终导出的文件放到树莓派的Veye V4L2源码的路径下</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/pi/Veye_Camera_V4L2/raspberrypi_v4l2-main/release/driver_bin/5.10.63-v8+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320225151.png"></p><blockquote><p>然后通过脚本在树莓派上安装驱动模块以及设备树二进制文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/pi/Veye_Camera_V4L2/raspberrypi_v4l2-main/release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./install_driver.sh veyecam2m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dmesg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320225525.png"></p><blockquote><p>此时，重新开机还不能用，只有内核，以及驱动模块，还有设备树二进制文件都替换掉了，才有用，也就是下一步</p></blockquote><h2 id="5-将编译结果导出到TF卡"><a href="#5-将编译结果导出到TF卡" class="headerlink" title="5 将编译结果导出到TF卡"></a>5 将编译结果导出到TF卡</h2><blockquote><p>首先查看tf卡是否正常插入</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>然后，建立挂载目录</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi<span class="token function">mkdir</span> mnt<span class="token function">mkdir</span> mnt/fat32<span class="token function">mkdir</span> mnt/ext4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>挂载文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi<span class="token function">sudo</span> <span class="token function">mount</span> /dev/sdb1 ./mnt/fat32<span class="token function">sudo</span> <span class="token function">mount</span> /dev/sdb2 ./mnt/ext4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>安装驱动模块到TF卡</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span class="token function">sudo</span> <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span> <span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm64 <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>aarch64-linux-gnu- <span class="token assign-left variable">INSTALL_MOD_PATH</span><span class="token operator">=</span><span class="token punctuation">..</span>/mnt/ext4 modules_install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备份原版kernel</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/mnt/fat32<span class="token function">cp</span> ./kernel8.img ./kernel8_bak.img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装kernel，以及设备树二进制文件到TF卡</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span class="token function">sudo</span> <span class="token function">cp</span> arch/arm64/boot/Image <span class="token punctuation">..</span>/mnt/fat32/kernel8.img <span class="token parameter variable">-f</span><span class="token function">sudo</span> <span class="token function">cp</span> arch/arm64/boot/dts/broadcom/*.dtb <span class="token punctuation">..</span>/mnt/fat32/ <span class="token parameter variable">-f</span><span class="token function">sudo</span> <span class="token function">cp</span> arch/arm64/boot/dts/overlays/*.dtb* <span class="token punctuation">..</span>/mnt/fat32/overlays/ <span class="token parameter variable">-f</span><span class="token function">sudo</span> <span class="token function">cp</span> arch/arm64/boot/dts/overlays/README <span class="token punctuation">..</span>/mnt/fat32/overlays/ <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>卸载挂载的TF卡</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span class="token function">sudo</span> <span class="token function">umount</span> <span class="token punctuation">..</span>/mnt/fat32<span class="token function">sudo</span> <span class="token function">umount</span> <span class="token punctuation">..</span>/mnt/ext4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-虚拟机，主机弹出TF卡，插入到树莓派"><a href="#6-虚拟机，主机弹出TF卡，插入到树莓派" class="headerlink" title="6 虚拟机，主机弹出TF卡，插入到树莓派"></a>6 虚拟机，主机弹出TF卡，插入到树莓派</h2><blockquote><p>到这一步，即完成IMX385的V4L2的移植了</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320230934.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dmesg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320231014.png"></p><p><img src="http://pic.huangruimin.tech/20220320231101.png"></p><p><img src="http://pic.huangruimin.tech/20220320231048.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>I2C转16路PWM</title>
      <link href="/2021/09/07/i2c-zhuan-16-lu-pwm/"/>
      <url>/2021/09/07/i2c-zhuan-16-lu-pwm/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1 基本介绍"></a>1 基本介绍</h2><h3 id="1-1-该IC主要参数特征如下："><a href="#1-1-该IC主要参数特征如下：" class="headerlink" title="1.1 该IC主要参数特征如下："></a>1.1 该IC主要参数特征如下：</h3><ul><li>I2C接口，支持高达16路PWM输出，每路12位分辨率(4096级)</li><li>内置25MHz晶振，可不连接外部晶振，也可以连接外部晶振，最大50MHz</li><li>支持2.3V-5.5V电压，最大耐压值5.5V,逻辑电平3.3V</li><li>具有上电复位，以及软件复位等功能<br><img src="http://pic.huangruimin.tech/20190518024522.png"><br><strong>注</strong>：本教程侧重PCA9685的PWM输出，但PCA9685亦可用于WS2812等LED颜色控制等。</li></ul><h3 id="1-2-控制精度"><a href="#1-2-控制精度" class="headerlink" title="1.2 控制精度"></a>1.2 控制精度</h3><p>假设舵机为50HZ的控制频率，脉宽为0.5ms~2.5ms，12位分辨率(4096级)，相关精度计算如下：</p><ul><li><p>PWM周期：<br><img src="http://pic.huangruimin.tech/20190518130821.png"></p></li><li><p>时间分辨率：<br><img src="http://pic.huangruimin.tech/20190518130904.png"></p></li><li><p>最大脉宽时间：<br><img src="http://pic.huangruimin.tech/20190518130937.png"></p></li><li><p>最大脉宽时间可分成的份数：<br><img src="http://pic.huangruimin.tech/20190518131003.png"></p></li><li><p>0-180度的舵机，角度分辨率：<br><img src="http://pic.huangruimin.tech/20190518131028.png"></p></li></ul><h2 id="2-硬件参数"><a href="#2-硬件参数" class="headerlink" title="2 硬件参数"></a>2 硬件参数</h2><h3 id="2-1-封装及引脚排列"><a href="#2-1-封装及引脚排列" class="headerlink" title="2.1 封装及引脚排列"></a>2.1 封装及引脚排列</h3><p>PCA9685有两种封装：TSSOP28, HVQFN28，其相应的引脚排列如下图所示：<br><img src="http://pic.huangruimin.tech/20190518024735.png"><br>引脚功能描述如下图所示：<br><img src="http://pic.huangruimin.tech/20190518024833.png"><br><img src="http://pic.huangruimin.tech/20190518024855.png"></p><h3 id="2-2-器件地址"><a href="#2-2-器件地址" class="headerlink" title="2.2 器件地址"></a>2.2 器件地址</h3><p>PCA9685的器件地址是由引脚A0，A1，A2，A3，A4，A5共同决定，并且该引脚不可悬空，由于有6个引脚共同决定器件地址，因此，可以有64个器件地址，由于该IC上电便保留LED All Call address (E0h，1110 000)以及Software Reset address(06h，0000 0110)，实际仅有62个可用器件地址，因此，理论上，1个I2C接口可控制16*62=992路PWM，其引脚控制器件地址的示意图如下图所示：<br><img src="http://pic.huangruimin.tech/20190518025127.png"><br>默认情况下，若将A0-A5全部接地，则其器件地址为:0x40。</p><h3 id="2-3-寄存器及其地址"><a href="#2-3-寄存器及其地址" class="headerlink" title="2.3 寄存器及其地址"></a>2.3 寄存器及其地址</h3><p>默认情况下，上电复位后，寄存器地址的默认值均为0，寄存器地址及其用途见下图所示:<br><img src="http://pic.huangruimin.tech/20190518025235.png"><br><img src="http://pic.huangruimin.tech/20190518025305.png"><br>图中节选的部分寄存器地址中，主要关心以下寄存器：</p><ul><li>模式设置寄存器：MODE1，MODE2。</li><li>脉宽(占空比)设置寄存器：LED0_ON_L,LED0_ON_H,LED0_OFF_L,LED0_OFF_H……LED15……每一路PWM通道占用4个寄存器。</li><li>周期(频率)设置寄存器：PRE_SCALE。<br>接下来介绍以上寄存器的使用及其注意事项。</li></ul><h3 id="2-4-模式设置寄存器"><a href="#2-4-模式设置寄存器" class="headerlink" title="2.4 模式设置寄存器"></a>2.4 模式设置寄存器</h3><h4 id="2-4-1-MODE1寄存器"><a href="#2-4-1-MODE1寄存器" class="headerlink" title="2.4.1 MODE1寄存器"></a>2.4.1 MODE1寄存器</h4><p>首先介绍MODE1寄存器,如下图:<br><img src="http://pic.huangruimin.tech/20190518025438.png"><br>在使用该寄存器的时候要注意：</p><ul><li><p>如果未停止所有PWM输出就将其进入到睡眠模式，那么，所有输出通道在下一轮都将输出高电平。</p></li><li><p>睡眠后重新启动PWM的操作为:<br><img src="http://pic.huangruimin.tech/20190518025531.png"></p></li><li><p>注意，在设置PWM频率(写PRESCALE寄存器)的时候，要先设置为Sleep模式，请参考后面源码部分。</p></li></ul><h4 id="2-4-2-MODE2寄存器"><a href="#2-4-2-MODE2寄存器" class="headerlink" title="2.4.2 MODE2寄存器"></a>2.4.2 MODE2寄存器</h4><p>该寄存器的各位功能如下图所示:<br><img src="http://pic.huangruimin.tech/20190518025715.png"></p><h3 id="2-5-PWM通道寄存器及其占空比设置"><a href="#2-5-PWM通道寄存器及其占空比设置" class="headerlink" title="2.5 PWM通道寄存器及其占空比设置"></a>2.5 PWM通道寄存器及其占空比设置</h3><p>PWM通道寄存器如下图：<br><img src="http://pic.huangruimin.tech/20190518025806.png"><br>由图可知，对于每一个通道，有4个寄存器，每个寄存器图解如下图所示:<br><img src="http://pic.huangruimin.tech/20190518025850.png"><br>在设置PWM占空比的时候，首先，配置舵机的示例如下图所示(ON &lt; OFF的情况):<br><img src="http://pic.huangruimin.tech/20190518030017.png"><br>当特殊情况下，PWM周期大于定时器一次计数时,如下图所示(ON&gt;OFF的情况):<br><img src="http://pic.huangruimin.tech/20190518031556.png"></p><h3 id="2-6-PWM周期-频率-寄存器及其周期-频率-设置"><a href="#2-6-PWM周期-频率-寄存器及其周期-频率-设置" class="headerlink" title="2.6 PWM周期(频率)寄存器及其周期(频率)设置"></a>2.6 PWM周期(频率)寄存器及其周期(频率)设置</h3><p>接下来介绍配置PWM频率的寄存器:<br>一般情况下，在用内置晶振，为25MHZ，通过配置PRE_SCALE寄存器进行配置，配置的PRE_SCALE寄存器的值与PWM频率的关系如下图所示:<br><img src="http://pic.huangruimin.tech/20190518030157.png"><br>如果在舵机控制中，采用内置晶振，取osc_clock=25000000，update_rate=50(舵机控制频率50Hz)</p><h3 id="2-7-推荐硬件设计"><a href="#2-7-推荐硬件设计" class="headerlink" title="2.7 推荐硬件设计"></a>2.7 推荐硬件设计</h3><p>首先，OE引脚须接低电平以确保IC使能，如果连接LED灯，则推荐以下几种连接方式，如下图所示:<br><img src="http://pic.huangruimin.tech/20190518030252.png"></p><h2 id="3-软件设计"><a href="#3-软件设计" class="headerlink" title="3 软件设计"></a>3 软件设计</h2><h3 id="3-1-Micro-bit平台TypeScript版"><a href="#3-1-Micro-bit平台TypeScript版" class="headerlink" title="3.1 Micro:bit平台TypeScript版"></a>3.1 Micro:bit平台TypeScript版</h3><p>接下来进行软件设计部分讲解，由于本次开发采用Micro:bit底层开发，采用的是TypeScript(JavaScript的超类),所以暂提供该语言，提供基本操作方法及其思路，日后再更新C,C++及其它平台(STM32,Linux树莓派，Arduino等)操作方法，源码如下，可结合DataSheet及以上教程理解：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 使用此文件来定义自定义函数和图形块。 * 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom */</span> <span class="token comment">/** * 自定义图形块 */</span><span class="token comment">//% weight=5 color=#0fbc11 icon="\uf113"</span>namespace Servo <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token constant">PCA9685_ADDRESS</span> <span class="token operator">=</span> <span class="token number">0x40</span>    <span class="token keyword">const</span> <span class="token constant">MODE1</span> <span class="token operator">=</span> <span class="token number">0x00</span>    <span class="token keyword">const</span> <span class="token constant">MODE2</span> <span class="token operator">=</span> <span class="token number">0x01</span>    <span class="token keyword">const</span> <span class="token constant">SUBADR1</span> <span class="token operator">=</span> <span class="token number">0x02</span>    <span class="token keyword">const</span> <span class="token constant">SUBADR2</span> <span class="token operator">=</span> <span class="token number">0x03</span>    <span class="token keyword">const</span> <span class="token constant">SUBADR3</span> <span class="token operator">=</span> <span class="token number">0x04</span>    <span class="token keyword">const</span> <span class="token constant">PRESCALE</span> <span class="token operator">=</span> <span class="token number">0xFE</span>    <span class="token keyword">const</span> <span class="token constant">LED0_ON_L</span> <span class="token operator">=</span> <span class="token number">0x06</span>    <span class="token keyword">const</span> <span class="token constant">LED0_ON_H</span> <span class="token operator">=</span> <span class="token number">0x07</span>    <span class="token keyword">const</span> <span class="token constant">LED0_OFF_L</span> <span class="token operator">=</span> <span class="token number">0x08</span>    <span class="token keyword">const</span> <span class="token constant">LED0_OFF_H</span> <span class="token operator">=</span> <span class="token number">0x09</span>    <span class="token keyword">const</span> <span class="token constant">ALL_LED_ON_L</span> <span class="token operator">=</span> <span class="token number">0xFA</span>    <span class="token keyword">const</span> <span class="token constant">ALL_LED_ON_H</span> <span class="token operator">=</span> <span class="token number">0xFB</span>    <span class="token keyword">const</span> <span class="token constant">ALL_LED_OFF_L</span> <span class="token operator">=</span> <span class="token number">0xFC</span>    <span class="token keyword">const</span> <span class="token constant">ALL_LED_OFF_H</span> <span class="token operator">=</span> <span class="token number">0xFD</span>     <span class="token keyword">const</span> <span class="token constant">STP_CHA_L</span> <span class="token operator">=</span> <span class="token number">2047</span>    <span class="token keyword">const</span> <span class="token constant">STP_CHA_H</span> <span class="token operator">=</span> <span class="token number">4095</span>     <span class="token keyword">const</span> <span class="token constant">STP_CHB_L</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">const</span> <span class="token constant">STP_CHB_H</span> <span class="token operator">=</span> <span class="token number">2047</span>     <span class="token keyword">const</span> <span class="token constant">STP_CHC_L</span> <span class="token operator">=</span> <span class="token number">1023</span>    <span class="token keyword">const</span> <span class="token constant">STP_CHC_H</span> <span class="token operator">=</span> <span class="token number">3071</span>     <span class="token keyword">const</span> <span class="token constant">STP_CHD_L</span> <span class="token operator">=</span> <span class="token number">3071</span>    <span class="token keyword">const</span> <span class="token constant">STP_CHD_H</span> <span class="token operator">=</span> <span class="token number">1023</span>     <span class="token keyword">let</span> initialized <span class="token operator">=</span> <span class="token boolean">false</span>     <span class="token keyword">function</span> <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">addr</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">reg</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> buf <span class="token operator">=</span> pins<span class="token punctuation">.</span><span class="token function">createBuffer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> reg        buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value        pins<span class="token punctuation">.</span><span class="token function">i2cWriteBuffer</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> buf<span class="token punctuation">)</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">i2cread</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">addr</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">reg</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pins<span class="token punctuation">.</span><span class="token function">i2cWriteNumber</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> reg<span class="token punctuation">,</span> NumberFormat<span class="token punctuation">.</span>UInt8BE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> val <span class="token operator">=</span> pins<span class="token punctuation">.</span><span class="token function">i2cReadNumber</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> NumberFormat<span class="token punctuation">.</span>UInt8BE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">initPCA9685</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">MODE1</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span>        <span class="token function">setFreq</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPwm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4095</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setPwm</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        initialized <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">setFreq</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">freq</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        <span class="token comment">// Constrain the frequency</span>        <span class="token keyword">let</span> prescaleval <span class="token operator">=</span> <span class="token number">25000000</span><span class="token punctuation">;</span>        prescaleval <span class="token operator">/=</span> <span class="token number">4096</span><span class="token punctuation">;</span>        prescaleval <span class="token operator">/=</span> freq<span class="token punctuation">;</span>        prescaleval <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> prescale <span class="token operator">=</span> prescaleval<span class="token punctuation">;</span> <span class="token comment">//Math.Floor(prescaleval + 0.5);</span>        <span class="token keyword">let</span> oldmode <span class="token operator">=</span> <span class="token function">i2cread</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">MODE1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> newmode <span class="token operator">=</span> <span class="token punctuation">(</span>oldmode <span class="token operator">&amp;</span> <span class="token number">0x7F</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x10</span><span class="token punctuation">;</span> <span class="token comment">// sleep</span>        <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">MODE1</span><span class="token punctuation">,</span> newmode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// go to sleep</span>        <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">PRESCALE</span><span class="token punctuation">,</span> prescale<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set the prescaler</span>        <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">MODE1</span><span class="token punctuation">,</span> oldmode<span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">waitMicros</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">MODE1</span><span class="token punctuation">,</span> oldmode <span class="token operator">|</span> <span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">setPwm</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">channel</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">on</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">off</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> channel <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token keyword">let</span> buf <span class="token operator">=</span> pins<span class="token punctuation">.</span><span class="token function">createBuffer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">LED0_ON_L</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> channel<span class="token punctuation">;</span>        buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> on <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>on <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> off <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>off <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        pins<span class="token punctuation">.</span><span class="token function">i2cWriteBuffer</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment">/** * Servo Execute * @param degree [0-180] degree of servo; eg: 90, 0, 180*/</span>    <span class="token comment">//% blockId=setServo block="Servo channel|%channel|degree %degree"</span>    <span class="token comment">//% weight=85</span>    <span class="token comment">//% degree.min=0 degree.max=180</span>    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Servo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">channel</span><span class="token operator">:</span> number<span class="token punctuation">,</span><span class="token literal-property property">degree</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">initPCA9685</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">// 50hz: 20,000 us</span>        <span class="token keyword">let</span> v_us <span class="token operator">=</span> <span class="token punctuation">(</span>degree <span class="token operator">*</span> <span class="token number">1800</span> <span class="token operator">/</span> <span class="token number">180</span> <span class="token operator">+</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.6 ~ 2.4</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> v_us <span class="token operator">*</span> <span class="token number">4096</span> <span class="token operator">/</span> <span class="token number">20000</span><span class="token punctuation">;</span>        <span class="token function">setPwm</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/** * Servo Execute * @param pulse [500-2500] pulse of servo; eg: 1500, 500, 2500*/</span>    <span class="token comment">//% blockId=setServoPulse block="Servo channel|%channel|pulse %pulse"</span>    <span class="token comment">//% weight=85</span>    <span class="token comment">//% pulse.min=500 pulse.max=2500</span>    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ServoPulse</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">channel</span><span class="token operator">:</span> number<span class="token punctuation">,</span><span class="token literal-property property">pulse</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">initPCA9685</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">// 50hz: 20,000 us</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> pulse <span class="token operator">*</span> <span class="token number">4096</span> <span class="token operator">/</span> <span class="token number">20000</span><span class="token punctuation">;</span>        <span class="token function">setPwm</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上便是Micro:bit驱动PCA9685的源代码，注意源代码中的时间为us，而教程中的时间为ms。</p><h3 id="3-2-树莓派平台Python版"><a href="#3-2-树莓派平台Python版" class="headerlink" title="3.2 树莓派平台Python版"></a>3.2 树莓派平台Python版</h3><p>要运行该程序，首先选装python，安装好Python后，还需要安装树莓派平台的smbus库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-smbus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>树莓派平台采用Python驱动PCA9685的Python代码如下所示:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span> <span class="token keyword">import</span> time<span class="token keyword">import</span> math<span class="token keyword">import</span> smbus <span class="token comment"># ============================================================================</span><span class="token comment"># Raspi PCA9685 16-Channel PWM Servo Driver</span><span class="token comment"># ============================================================================</span> <span class="token keyword">class</span> <span class="token class-name">PCA9685</span><span class="token punctuation">:</span>   <span class="token comment"># Registers/etc.</span>  __SUBADR1            <span class="token operator">=</span> <span class="token number">0x02</span>  __SUBADR2            <span class="token operator">=</span> <span class="token number">0x03</span>  __SUBADR3            <span class="token operator">=</span> <span class="token number">0x04</span>  __MODE1              <span class="token operator">=</span> <span class="token number">0x00</span>  __PRESCALE           <span class="token operator">=</span> <span class="token number">0xFE</span>  __LED0_ON_L          <span class="token operator">=</span> <span class="token number">0x06</span>  __LED0_ON_H          <span class="token operator">=</span> <span class="token number">0x07</span>  __LED0_OFF_L         <span class="token operator">=</span> <span class="token number">0x08</span>  __LED0_OFF_H         <span class="token operator">=</span> <span class="token number">0x09</span>  __ALLLED_ON_L        <span class="token operator">=</span> <span class="token number">0xFA</span>  __ALLLED_ON_H        <span class="token operator">=</span> <span class="token number">0xFB</span>  __ALLLED_OFF_L       <span class="token operator">=</span> <span class="token number">0xFC</span>  __ALLLED_OFF_H       <span class="token operator">=</span> <span class="token number">0xFD</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>bus <span class="token operator">=</span> smbus<span class="token punctuation">.</span>SMBus<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>address <span class="token operator">=</span> address    self<span class="token punctuation">.</span>debug <span class="token operator">=</span> debug    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Reseting PCA9685"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__MODE1<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reg<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Writes an 8-bit value to the specified register/address"</span>    self<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>write_byte_data<span class="token punctuation">(</span>self<span class="token punctuation">.</span>address<span class="token punctuation">,</span> reg<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I2C: Write 0x%02X to register 0x%02X"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> reg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Read an unsigned byte from the I2C device"</span>    result <span class="token operator">=</span> self<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>read_byte_data<span class="token punctuation">(</span>self<span class="token punctuation">.</span>address<span class="token punctuation">,</span> reg<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I2C: Device 0x%02X returned 0x%02X from reg 0x%02X"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>address<span class="token punctuation">,</span> result <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> reg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token keyword">def</span> <span class="token function">setPWMFreq</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> freq<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Sets the PWM frequency"</span>    prescaleval <span class="token operator">=</span> <span class="token number">25000000.0</span>    <span class="token comment"># 25MHz</span>    prescaleval <span class="token operator">/=</span> <span class="token number">4096.0</span>       <span class="token comment"># 12-bit</span>    prescaleval <span class="token operator">/=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>freq<span class="token punctuation">)</span>    prescaleval <span class="token operator">-=</span> <span class="token number">1.0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Setting PWM frequency to %d Hz"</span> <span class="token operator">%</span> freq<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Estimated pre-scale: %d"</span> <span class="token operator">%</span> prescaleval<span class="token punctuation">)</span>    prescale <span class="token operator">=</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>prescaleval <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Final pre-scale: %d"</span> <span class="token operator">%</span> prescale<span class="token punctuation">)</span>     oldmode <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__MODE1<span class="token punctuation">)</span><span class="token punctuation">;</span>    newmode <span class="token operator">=</span> <span class="token punctuation">(</span>oldmode <span class="token operator">&amp;</span> <span class="token number">0x7F</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x10</span>        <span class="token comment"># sleep</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__MODE1<span class="token punctuation">,</span> newmode<span class="token punctuation">)</span>        <span class="token comment"># go to sleep</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__PRESCALE<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>prescale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__MODE1<span class="token punctuation">,</span> oldmode<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.005</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__MODE1<span class="token punctuation">,</span> oldmode <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">setPWM</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> on<span class="token punctuation">,</span> off<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Sets a single PWM channel"</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__LED0_ON_L<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>channel<span class="token punctuation">,</span> on <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__LED0_ON_H<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>channel<span class="token punctuation">,</span> on <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__LED0_OFF_L<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>channel<span class="token punctuation">,</span> off <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__LED0_OFF_H<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>channel<span class="token punctuation">,</span> off <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"channel: %d  LED_ON: %d LED_OFF: %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>channel<span class="token punctuation">,</span>on<span class="token punctuation">,</span>off<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">setServoPulse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> pulse<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Sets the Servo Pulse,The PWM frequency must be 50HZ"</span>    pulse <span class="token operator">=</span> pulse<span class="token operator">*</span><span class="token number">4096</span><span class="token operator">/</span><span class="token number">20000</span>        <span class="token comment">#PWM frequency is 50HZ,the period is 20000us</span>    self<span class="token punctuation">.</span>setPWM<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pulse<span class="token punctuation">)</span> <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>   pwm <span class="token operator">=</span> PCA9685<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  pwm<span class="token punctuation">.</span>setPWMFreq<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   <span class="token comment"># setServoPulse(2,2500)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">2500</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pwm<span class="token punctuation">.</span>setServoPulse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>         time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      pwm<span class="token punctuation">.</span>setServoPulse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>       time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存文件命名为: pca9685.py,命令行进入该文件所在的路径，运行该Python脚本:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> python pca9685.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行该命令后，便可控制舵机从0度转到180度，再从180度转到0度。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>调试专用页面</title>
      <link href="/2018/09/07/hello-world/"/>
      <url>/2018/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
