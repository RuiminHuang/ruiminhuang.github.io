<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何为RPi交叉编译特定版本的支持v4l2的.ko以及.dtb</title>
      <link href="/2021/10/07/ru-he-wei-rpi-jiao-cha-bian-yi-te-ding-ban-ben-de-zhi-chi-v4l2-de.ko-yi-ji.dtb/"/>
      <url>/2021/10/07/ru-he-wei-rpi-jiao-cha-bian-yi-te-ding-ban-ben-de-zhi-chi-v4l2-de.ko-yi-ji.dtb/</url>
      
        <content type="html"><![CDATA[<h2 id="0-背景"><a href="#0-背景" class="headerlink" title="0 背景"></a>0 背景</h2><p>我在以前一个版本的64bit树莓派系统上，搭建了很多环境，现在，这个64bit的树莓派系统需要接入IMX385，目前只有v4l2这种方案(64bit的树莓派系统删除了一些库，树莓派原生相机也就不支持)。</p><p>但悲催的是，目前veye在Github提供的源码，只支持内核版本为5.10.92-v8+的树莓派，也就是只支持比较新版本的树莓派进行，然而我的树莓派系统内核版本为5.10.63-v8+，veye官方的源码也就不支持。</p><blockquote><p>解决方法一：更换内核版本为5.10.92-v8+的树莓派系统，但有点不太现实，我搭建了很多环境，特别是很多深度学习的推理环境，这样再折腾明显不现实。</p></blockquote><blockquote><p>解决方法二：交叉编译一个支持5.10.63-v8+的.ko以及.dtb，这个工作量会少很多，接下来就开始。</p></blockquote><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h2><blockquote><p> 开发环境准备，在虚拟机Ubuntu18.04中操作</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">git</span> <span class="token function">bc</span> bison flex libssl-dev <span class="token function">make</span> libc6-dev libncurses5-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> crossbuild-essential-arm64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>确认自己的树莓派上的piOS版本，以下动作在树莓派上面完成</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-r</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320223036.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/pi/ko_dev<span class="token function">cp</span> /usr/share/doc/raspberrypi-bootloader/changelog.Debian.gz ./<span class="token function">vi</span> changelog.Debian<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320223131.png"></p><blockquote><p>从下面的连接下载源码</p></blockquote><p><a href="http://github.com/raspberrypi/linux/tags">Github源码链接</a></p><p><img src="http://pic.huangruimin.tech/20220320223241.png"></p><blockquote><p>将获取到的源码放虚拟机上</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320222937.png"></p><h2 id="2-给源代码打补丁"><a href="#2-给源代码打补丁" class="headerlink" title="2 给源代码打补丁"></a>2 给源代码打补丁</h2><blockquote><p>以下动作在虚拟机中进行，打补丁</p></blockquote><blockquote><p>进入到第一个需要打补丁的地方</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./drivers/media/i2c/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>先删掉要被替换的文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ./Kconfig<span class="token function">rm</span> <span class="token parameter variable">-rf</span> ./Makefile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>将以下文件copy到虚拟机中</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320222018.png"></p><blockquote><p>继续拷贝文件</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320222304.png"></p><blockquote><p>进入到第二个需要打补丁的地方</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./arch/arm/boot/dts/overlays<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>删除需要被替换的文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> ./Makefile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>拷贝文件</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320222801.png"></p><blockquote><p>其中要去替换的Makefile中是多了以下内容</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">csimx307-dual-cm4.dtbo<span class="token punctuation">\</span>csimx307.dtbo<span class="token punctuation">\</span>cssc132-dual-cm4.dtbo<span class="token punctuation">\</span>cssc132.dtbo<span class="token punctuation">\</span>veye327-dual-cm4.dtbo<span class="token punctuation">\</span>veye327.dtbo<span class="token punctuation">\</span>veyecam2m-dual-cm4.dtbo<span class="token punctuation">\</span>veyecam2m.dtbo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-开始编译源码"><a href="#3-开始编译源码" class="headerlink" title="3 开始编译源码"></a>3 开始编译源码</h2><blockquote><p>首先是编译准备</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">KERNEL</span><span class="token operator">=</span>kernel8<span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm64 <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>aarch64-linux-gnu- bcm2711_defconfi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>然后是增加编译选项</p><blockquote><p>5.10版本kernel的路径是Device Drivers –&gt; Multimedia Support –&gt; Media ancillary drivers –&gt; Camera sensor devices</p></blockquote></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm64 <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>aarch64-linux-gnu- menuconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320223827.png"></p><blockquote><p>接着是开始编译内核，模块，设备树</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm64 <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>aarch64-linux-gnu- Image modules dtbs <span class="token parameter variable">-j4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-将编译结果导出"><a href="#4-将编译结果导出" class="headerlink" title="4 将编译结果导出"></a>4 将编译结果导出</h2><blockquote><p>导出模块文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./drivers/media/i2c/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>以下为需要导出的文件</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320224431.png"></p><blockquote><p>导出设备树二进制文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./arch/arm/boot/dts/overlays<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>以下为需要导出的二进制文件</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320224801.png"></p><blockquote><p>最终导出的驱动模块文件，设备树二进制文件，放在PC的下列文件夹中</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320224908.png"></p><blockquote><p>需要将最终导出的文件放到树莓派的Veye V4L2源码的路径下</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/pi/Veye_Camera_V4L2/raspberrypi_v4l2-main/release/driver_bin/5.10.63-v8+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320225151.png"></p><blockquote><p>然后通过脚本在树莓派上安装驱动模块以及设备树二进制文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/pi/Veye_Camera_V4L2/raspberrypi_v4l2-main/release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./install_driver.sh veyecam2m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dmesg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320225525.png"></p><blockquote><p>此时，重新开机还不能用，只有内核，以及驱动模块，还有设备树二进制文件都替换掉了，才有用，也就是下一步</p></blockquote><h2 id="5-将编译结果导出到TF卡"><a href="#5-将编译结果导出到TF卡" class="headerlink" title="5 将编译结果导出到TF卡"></a>5 将编译结果导出到TF卡</h2><blockquote><p>首先查看tf卡是否正常插入</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lsblk <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>然后，建立挂载目录</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi<span class="token function">mkdir</span> mnt<span class="token function">mkdir</span> mnt/fat32<span class="token function">mkdir</span> mnt/ext4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>挂载文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi<span class="token function">sudo</span> <span class="token function">mount</span> /dev/sdb1 ./mnt/fat32<span class="token function">sudo</span> <span class="token function">mount</span> /dev/sdb2 ./mnt/ext4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>安装驱动模块到TF卡</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span class="token function">sudo</span> <span class="token function">env</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span> <span class="token function">make</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm64 <span class="token assign-left variable">CROSS_COMPILE</span><span class="token operator">=</span>aarch64-linux-gnu- <span class="token assign-left variable">INSTALL_MOD_PATH</span><span class="token operator">=</span><span class="token punctuation">..</span>/mnt/ext4 modules_install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备份原版kernel</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/mnt/fat32<span class="token function">cp</span> ./kernel8.img ./kernel8_bak.img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>安装kernel，以及设备树二进制文件到TF卡</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span class="token function">sudo</span> <span class="token function">cp</span> arch/arm64/boot/Image <span class="token punctuation">..</span>/mnt/fat32/kernel8.img <span class="token parameter variable">-f</span><span class="token function">sudo</span> <span class="token function">cp</span> arch/arm64/boot/dts/broadcom/*.dtb <span class="token punctuation">..</span>/mnt/fat32/ <span class="token parameter variable">-f</span><span class="token function">sudo</span> <span class="token function">cp</span> arch/arm64/boot/dts/overlays/*.dtb* <span class="token punctuation">..</span>/mnt/fat32/overlays/ <span class="token parameter variable">-f</span><span class="token function">sudo</span> <span class="token function">cp</span> arch/arm64/boot/dts/overlays/README <span class="token punctuation">..</span>/mnt/fat32/overlays/ <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>卸载挂载的TF卡</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/book/RPi/linux-oldstable_20211201<span class="token function">sudo</span> <span class="token function">umount</span> <span class="token punctuation">..</span>/mnt/fat32<span class="token function">sudo</span> <span class="token function">umount</span> <span class="token punctuation">..</span>/mnt/ext4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-虚拟机，主机弹出TF卡，插入到树莓派"><a href="#6-虚拟机，主机弹出TF卡，插入到树莓派" class="headerlink" title="6 虚拟机，主机弹出TF卡，插入到树莓派"></a>6 虚拟机，主机弹出TF卡，插入到树莓派</h2><blockquote><p>到这一步，即完成IMX385的V4L2的移植了</p></blockquote><p><img src="http://pic.huangruimin.tech/20220320230934.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">dmesg</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20220320231014.png"></p><p><img src="http://pic.huangruimin.tech/20220320231101.png"></p><p><img src="http://pic.huangruimin.tech/20220320231048.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>I2C转16路PWM</title>
      <link href="/2021/09/07/i2c-zhuan-16-lu-pwm/"/>
      <url>/2021/09/07/i2c-zhuan-16-lu-pwm/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1 基本介绍"></a>1 基本介绍</h2><h3 id="1-1-该IC主要参数特征如下："><a href="#1-1-该IC主要参数特征如下：" class="headerlink" title="1.1 该IC主要参数特征如下："></a>1.1 该IC主要参数特征如下：</h3><ul><li>I2C接口，支持高达16路PWM输出，每路12位分辨率(4096级)</li><li>内置25MHz晶振，可不连接外部晶振，也可以连接外部晶振，最大50MHz</li><li>支持2.3V-5.5V电压，最大耐压值5.5V,逻辑电平3.3V</li><li>具有上电复位，以及软件复位等功能<br><img src="http://pic.huangruimin.tech/20190518024522.png"><br><strong>注</strong>：本教程侧重PCA9685的PWM输出，但PCA9685亦可用于WS2812等LED颜色控制等。</li></ul><h3 id="1-2-控制精度"><a href="#1-2-控制精度" class="headerlink" title="1.2 控制精度"></a>1.2 控制精度</h3><p>假设舵机为50HZ的控制频率，脉宽为0.5ms~2.5ms，12位分辨率(4096级)，相关精度计算如下：</p><ul><li><p>PWM周期：<br><img src="http://pic.huangruimin.tech/20190518130821.png"></p></li><li><p>时间分辨率：<br><img src="http://pic.huangruimin.tech/20190518130904.png"></p></li><li><p>最大脉宽时间：<br><img src="http://pic.huangruimin.tech/20190518130937.png"></p></li><li><p>最大脉宽时间可分成的份数：<br><img src="http://pic.huangruimin.tech/20190518131003.png"></p></li><li><p>0-180度的舵机，角度分辨率：<br><img src="http://pic.huangruimin.tech/20190518131028.png"></p></li></ul><h2 id="2-硬件参数"><a href="#2-硬件参数" class="headerlink" title="2 硬件参数"></a>2 硬件参数</h2><h3 id="2-1-封装及引脚排列"><a href="#2-1-封装及引脚排列" class="headerlink" title="2.1 封装及引脚排列"></a>2.1 封装及引脚排列</h3><p>PCA9685有两种封装：TSSOP28, HVQFN28，其相应的引脚排列如下图所示：<br><img src="http://pic.huangruimin.tech/20190518024735.png"><br>引脚功能描述如下图所示：<br><img src="http://pic.huangruimin.tech/20190518024833.png"><br><img src="http://pic.huangruimin.tech/20190518024855.png"></p><h3 id="2-2-器件地址"><a href="#2-2-器件地址" class="headerlink" title="2.2 器件地址"></a>2.2 器件地址</h3><p>PCA9685的器件地址是由引脚A0，A1，A2，A3，A4，A5共同决定，并且该引脚不可悬空，由于有6个引脚共同决定器件地址，因此，可以有64个器件地址，由于该IC上电便保留LED All Call address (E0h，1110 000)以及Software Reset address(06h，0000 0110)，实际仅有62个可用器件地址，因此，理论上，1个I2C接口可控制16*62=992路PWM，其引脚控制器件地址的示意图如下图所示：<br><img src="http://pic.huangruimin.tech/20190518025127.png"><br>默认情况下，若将A0-A5全部接地，则其器件地址为:0x40。</p><h3 id="2-3-寄存器及其地址"><a href="#2-3-寄存器及其地址" class="headerlink" title="2.3 寄存器及其地址"></a>2.3 寄存器及其地址</h3><p>默认情况下，上电复位后，寄存器地址的默认值均为0，寄存器地址及其用途见下图所示:<br><img src="http://pic.huangruimin.tech/20190518025235.png"><br><img src="http://pic.huangruimin.tech/20190518025305.png"><br>图中节选的部分寄存器地址中，主要关心以下寄存器：</p><ul><li>模式设置寄存器：MODE1，MODE2。</li><li>脉宽(占空比)设置寄存器：LED0_ON_L,LED0_ON_H,LED0_OFF_L,LED0_OFF_H……LED15……每一路PWM通道占用4个寄存器。</li><li>周期(频率)设置寄存器：PRE_SCALE。</li></ul><p>接下来介绍以上寄存器的使用及其注意事项。</p><h3 id="2-4-模式设置寄存器"><a href="#2-4-模式设置寄存器" class="headerlink" title="2.4 模式设置寄存器"></a>2.4 模式设置寄存器</h3><h4 id="2-4-1-MODE1寄存器"><a href="#2-4-1-MODE1寄存器" class="headerlink" title="2.4.1 MODE1寄存器"></a>2.4.1 MODE1寄存器</h4><p>首先介绍MODE1寄存器,如下图:<br><img src="http://pic.huangruimin.tech/20190518025438.png"><br>在使用该寄存器的时候要注意：</p><ul><li><p>如果未停止所有PWM输出就将其进入到睡眠模式，那么，所有输出通道在下一轮都将输出高电平。</p></li><li><p>睡眠后重新启动PWM的操作为:<br><img src="http://pic.huangruimin.tech/20190518025531.png"></p></li><li><p>注意，在设置PWM频率(写PRESCALE寄存器)的时候，要先设置为Sleep模式，请参考后面源码部分。</p></li></ul><h4 id="2-4-2-MODE2寄存器"><a href="#2-4-2-MODE2寄存器" class="headerlink" title="2.4.2 MODE2寄存器"></a>2.4.2 MODE2寄存器</h4><p>该寄存器的各位功能如下图所示:<br><img src="http://pic.huangruimin.tech/20190518025715.png"></p><h3 id="2-5-PWM通道寄存器及其占空比设置"><a href="#2-5-PWM通道寄存器及其占空比设置" class="headerlink" title="2.5 PWM通道寄存器及其占空比设置"></a>2.5 PWM通道寄存器及其占空比设置</h3><p>PWM通道寄存器如下图：<br><img src="http://pic.huangruimin.tech/20190518025806.png"><br>由图可知，对于每一个通道，有4个寄存器，每个寄存器图解如下图所示:<br><img src="http://pic.huangruimin.tech/20190518025850.png"><br>在设置PWM占空比的时候，首先，配置舵机的示例如下图所示(ON &lt; OFF的情况):<br><img src="http://pic.huangruimin.tech/20190518030017.png"><br>当特殊情况下，PWM周期大于定时器一次计数时,如下图所示(ON&gt;OFF的情况):<br><img src="http://pic.huangruimin.tech/20190518031556.png"></p><h3 id="2-6-PWM周期-频率-寄存器及其周期-频率-设置"><a href="#2-6-PWM周期-频率-寄存器及其周期-频率-设置" class="headerlink" title="2.6 PWM周期(频率)寄存器及其周期(频率)设置"></a>2.6 PWM周期(频率)寄存器及其周期(频率)设置</h3><p>接下来介绍配置PWM频率的寄存器:<br>一般情况下，在用内置晶振，为25MHZ，通过配置PRE_SCALE寄存器进行配置，配置的PRE_SCALE寄存器的值与PWM频率的关系如下图所示:<br><img src="http://pic.huangruimin.tech/20230826011112.png"><br>如果在舵机控制中，采用内置晶振，取osc_clock=25000000，update_rate=50(舵机控制频率50Hz)</p><h3 id="2-7-推荐硬件设计"><a href="#2-7-推荐硬件设计" class="headerlink" title="2.7 推荐硬件设计"></a>2.7 推荐硬件设计</h3><p>首先，OE引脚须接低电平以确保IC使能，如果连接LED灯，则推荐以下几种连接方式，如下图所示:<br><img src="http://pic.huangruimin.tech/20190518030252.png"></p><h2 id="3-软件设计"><a href="#3-软件设计" class="headerlink" title="3 软件设计"></a>3 软件设计</h2><h3 id="3-1-Micro-bit平台TypeScript版"><a href="#3-1-Micro-bit平台TypeScript版" class="headerlink" title="3.1 Micro:bit平台TypeScript版"></a>3.1 Micro:bit平台TypeScript版</h3><p>接下来进行软件设计部分讲解，由于本次开发采用Micro:bit底层开发，采用的是TypeScript(JavaScript的超类),所以暂提供该语言，提供基本操作方法及其思路，日后再更新C,C++及其它平台(STM32,Linux树莓派，Arduino等)操作方法，源码如下，可结合DataSheet及以上教程理解：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 使用此文件来定义自定义函数和图形块。 * 想了解更详细的信息，请前往 https://makecode.microbit.org/blocks/custom */</span> <span class="token comment">/** * 自定义图形块 */</span><span class="token comment">//% weight=5 color=#0fbc11 icon="\uf113"</span>namespace Servo <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token constant">PCA9685_ADDRESS</span> <span class="token operator">=</span> <span class="token number">0x40</span>    <span class="token keyword">const</span> <span class="token constant">MODE1</span> <span class="token operator">=</span> <span class="token number">0x00</span>    <span class="token keyword">const</span> <span class="token constant">MODE2</span> <span class="token operator">=</span> <span class="token number">0x01</span>    <span class="token keyword">const</span> <span class="token constant">SUBADR1</span> <span class="token operator">=</span> <span class="token number">0x02</span>    <span class="token keyword">const</span> <span class="token constant">SUBADR2</span> <span class="token operator">=</span> <span class="token number">0x03</span>    <span class="token keyword">const</span> <span class="token constant">SUBADR3</span> <span class="token operator">=</span> <span class="token number">0x04</span>    <span class="token keyword">const</span> <span class="token constant">PRESCALE</span> <span class="token operator">=</span> <span class="token number">0xFE</span>    <span class="token keyword">const</span> <span class="token constant">LED0_ON_L</span> <span class="token operator">=</span> <span class="token number">0x06</span>    <span class="token keyword">const</span> <span class="token constant">LED0_ON_H</span> <span class="token operator">=</span> <span class="token number">0x07</span>    <span class="token keyword">const</span> <span class="token constant">LED0_OFF_L</span> <span class="token operator">=</span> <span class="token number">0x08</span>    <span class="token keyword">const</span> <span class="token constant">LED0_OFF_H</span> <span class="token operator">=</span> <span class="token number">0x09</span>    <span class="token keyword">const</span> <span class="token constant">ALL_LED_ON_L</span> <span class="token operator">=</span> <span class="token number">0xFA</span>    <span class="token keyword">const</span> <span class="token constant">ALL_LED_ON_H</span> <span class="token operator">=</span> <span class="token number">0xFB</span>    <span class="token keyword">const</span> <span class="token constant">ALL_LED_OFF_L</span> <span class="token operator">=</span> <span class="token number">0xFC</span>    <span class="token keyword">const</span> <span class="token constant">ALL_LED_OFF_H</span> <span class="token operator">=</span> <span class="token number">0xFD</span>     <span class="token keyword">const</span> <span class="token constant">STP_CHA_L</span> <span class="token operator">=</span> <span class="token number">2047</span>    <span class="token keyword">const</span> <span class="token constant">STP_CHA_H</span> <span class="token operator">=</span> <span class="token number">4095</span>     <span class="token keyword">const</span> <span class="token constant">STP_CHB_L</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">const</span> <span class="token constant">STP_CHB_H</span> <span class="token operator">=</span> <span class="token number">2047</span>     <span class="token keyword">const</span> <span class="token constant">STP_CHC_L</span> <span class="token operator">=</span> <span class="token number">1023</span>    <span class="token keyword">const</span> <span class="token constant">STP_CHC_H</span> <span class="token operator">=</span> <span class="token number">3071</span>     <span class="token keyword">const</span> <span class="token constant">STP_CHD_L</span> <span class="token operator">=</span> <span class="token number">3071</span>    <span class="token keyword">const</span> <span class="token constant">STP_CHD_H</span> <span class="token operator">=</span> <span class="token number">1023</span>     <span class="token keyword">let</span> initialized <span class="token operator">=</span> <span class="token boolean">false</span>     <span class="token keyword">function</span> <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">addr</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">reg</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> buf <span class="token operator">=</span> pins<span class="token punctuation">.</span><span class="token function">createBuffer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> reg        buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value        pins<span class="token punctuation">.</span><span class="token function">i2cWriteBuffer</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> buf<span class="token punctuation">)</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">i2cread</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">addr</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">reg</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        pins<span class="token punctuation">.</span><span class="token function">i2cWriteNumber</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> reg<span class="token punctuation">,</span> NumberFormat<span class="token punctuation">.</span>UInt8BE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> val <span class="token operator">=</span> pins<span class="token punctuation">.</span><span class="token function">i2cReadNumber</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> NumberFormat<span class="token punctuation">.</span>UInt8BE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">initPCA9685</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">MODE1</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span>        <span class="token function">setFreq</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setPwm</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4095</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setPwm</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        initialized <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">setFreq</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">freq</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        <span class="token comment">// Constrain the frequency</span>        <span class="token keyword">let</span> prescaleval <span class="token operator">=</span> <span class="token number">25000000</span><span class="token punctuation">;</span>        prescaleval <span class="token operator">/=</span> <span class="token number">4096</span><span class="token punctuation">;</span>        prescaleval <span class="token operator">/=</span> freq<span class="token punctuation">;</span>        prescaleval <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> prescale <span class="token operator">=</span> prescaleval<span class="token punctuation">;</span> <span class="token comment">//Math.Floor(prescaleval + 0.5);</span>        <span class="token keyword">let</span> oldmode <span class="token operator">=</span> <span class="token function">i2cread</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">MODE1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> newmode <span class="token operator">=</span> <span class="token punctuation">(</span>oldmode <span class="token operator">&amp;</span> <span class="token number">0x7F</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x10</span><span class="token punctuation">;</span> <span class="token comment">// sleep</span>        <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">MODE1</span><span class="token punctuation">,</span> newmode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// go to sleep</span>        <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">PRESCALE</span><span class="token punctuation">,</span> prescale<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set the prescaler</span>        <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">MODE1</span><span class="token punctuation">,</span> oldmode<span class="token punctuation">)</span><span class="token punctuation">;</span>        control<span class="token punctuation">.</span><span class="token function">waitMicros</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">i2cwrite</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">MODE1</span><span class="token punctuation">,</span> oldmode <span class="token operator">|</span> <span class="token number">0xa1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">setPwm</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">channel</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">on</span><span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">off</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>channel <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> channel <span class="token operator">&gt;</span> <span class="token number">15</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token keyword">let</span> buf <span class="token operator">=</span> pins<span class="token punctuation">.</span><span class="token function">createBuffer</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">LED0_ON_L</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> channel<span class="token punctuation">;</span>        buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> on <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>on <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> off <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        buf<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>off <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span>        pins<span class="token punctuation">.</span><span class="token function">i2cWriteBuffer</span><span class="token punctuation">(</span><span class="token constant">PCA9685_ADDRESS</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment">/** * Servo Execute * @param degree [0-180] degree of servo; eg: 90, 0, 180*/</span>    <span class="token comment">//% blockId=setServo block="Servo channel|%channel|degree %degree"</span>    <span class="token comment">//% weight=85</span>    <span class="token comment">//% degree.min=0 degree.max=180</span>    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Servo</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">channel</span><span class="token operator">:</span> number<span class="token punctuation">,</span><span class="token literal-property property">degree</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">initPCA9685</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">// 50hz: 20,000 us</span>        <span class="token keyword">let</span> v_us <span class="token operator">=</span> <span class="token punctuation">(</span>degree <span class="token operator">*</span> <span class="token number">1800</span> <span class="token operator">/</span> <span class="token number">180</span> <span class="token operator">+</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.6 ~ 2.4</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> v_us <span class="token operator">*</span> <span class="token number">4096</span> <span class="token operator">/</span> <span class="token number">20000</span><span class="token punctuation">;</span>        <span class="token function">setPwm</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment">/** * Servo Execute * @param pulse [500-2500] pulse of servo; eg: 1500, 500, 2500*/</span>    <span class="token comment">//% blockId=setServoPulse block="Servo channel|%channel|pulse %pulse"</span>    <span class="token comment">//% weight=85</span>    <span class="token comment">//% pulse.min=500 pulse.max=2500</span>    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">ServoPulse</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">channel</span><span class="token operator">:</span> number<span class="token punctuation">,</span><span class="token literal-property property">pulse</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">initPCA9685</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">// 50hz: 20,000 us</span>        <span class="token keyword">let</span> value <span class="token operator">=</span> pulse <span class="token operator">*</span> <span class="token number">4096</span> <span class="token operator">/</span> <span class="token number">20000</span><span class="token punctuation">;</span>        <span class="token function">setPwm</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上便是Micro:bit驱动PCA9685的源代码，注意源代码中的时间为us，而教程中的时间为ms。</p><h3 id="3-2-树莓派平台Python版"><a href="#3-2-树莓派平台Python版" class="headerlink" title="3.2 树莓派平台Python版"></a>3.2 树莓派平台Python版</h3><p>要运行该程序，首先选装python，安装好Python后，还需要安装树莓派平台的smbus库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-smbus<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>树莓派平台采用Python驱动PCA9685的Python代码如下所示:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span> <span class="token keyword">import</span> time<span class="token keyword">import</span> math<span class="token keyword">import</span> smbus <span class="token comment"># ============================================================================</span><span class="token comment"># Raspi PCA9685 16-Channel PWM Servo Driver</span><span class="token comment"># ============================================================================</span> <span class="token keyword">class</span> <span class="token class-name">PCA9685</span><span class="token punctuation">:</span>   <span class="token comment"># Registers/etc.</span>  __SUBADR1            <span class="token operator">=</span> <span class="token number">0x02</span>  __SUBADR2            <span class="token operator">=</span> <span class="token number">0x03</span>  __SUBADR3            <span class="token operator">=</span> <span class="token number">0x04</span>  __MODE1              <span class="token operator">=</span> <span class="token number">0x00</span>  __PRESCALE           <span class="token operator">=</span> <span class="token number">0xFE</span>  __LED0_ON_L          <span class="token operator">=</span> <span class="token number">0x06</span>  __LED0_ON_H          <span class="token operator">=</span> <span class="token number">0x07</span>  __LED0_OFF_L         <span class="token operator">=</span> <span class="token number">0x08</span>  __LED0_OFF_H         <span class="token operator">=</span> <span class="token number">0x09</span>  __ALLLED_ON_L        <span class="token operator">=</span> <span class="token number">0xFA</span>  __ALLLED_ON_H        <span class="token operator">=</span> <span class="token number">0xFB</span>  __ALLLED_OFF_L       <span class="token operator">=</span> <span class="token number">0xFC</span>  __ALLLED_OFF_H       <span class="token operator">=</span> <span class="token number">0xFD</span>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> address<span class="token operator">=</span><span class="token number">0x40</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>bus <span class="token operator">=</span> smbus<span class="token punctuation">.</span>SMBus<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>address <span class="token operator">=</span> address    self<span class="token punctuation">.</span>debug <span class="token operator">=</span> debug    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Reseting PCA9685"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__MODE1<span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reg<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Writes an 8-bit value to the specified register/address"</span>    self<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>write_byte_data<span class="token punctuation">(</span>self<span class="token punctuation">.</span>address<span class="token punctuation">,</span> reg<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I2C: Write 0x%02X to register 0x%02X"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> reg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Read an unsigned byte from the I2C device"</span>    result <span class="token operator">=</span> self<span class="token punctuation">.</span>bus<span class="token punctuation">.</span>read_byte_data<span class="token punctuation">(</span>self<span class="token punctuation">.</span>address<span class="token punctuation">,</span> reg<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I2C: Device 0x%02X returned 0x%02X from reg 0x%02X"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>address<span class="token punctuation">,</span> result <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> reg<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result  <span class="token keyword">def</span> <span class="token function">setPWMFreq</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> freq<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Sets the PWM frequency"</span>    prescaleval <span class="token operator">=</span> <span class="token number">25000000.0</span>    <span class="token comment"># 25MHz</span>    prescaleval <span class="token operator">/=</span> <span class="token number">4096.0</span>       <span class="token comment"># 12-bit</span>    prescaleval <span class="token operator">/=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>freq<span class="token punctuation">)</span>    prescaleval <span class="token operator">-=</span> <span class="token number">1.0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Setting PWM frequency to %d Hz"</span> <span class="token operator">%</span> freq<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Estimated pre-scale: %d"</span> <span class="token operator">%</span> prescaleval<span class="token punctuation">)</span>    prescale <span class="token operator">=</span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>prescaleval <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Final pre-scale: %d"</span> <span class="token operator">%</span> prescale<span class="token punctuation">)</span>     oldmode <span class="token operator">=</span> self<span class="token punctuation">.</span>read<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__MODE1<span class="token punctuation">)</span><span class="token punctuation">;</span>    newmode <span class="token operator">=</span> <span class="token punctuation">(</span>oldmode <span class="token operator">&amp;</span> <span class="token number">0x7F</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x10</span>        <span class="token comment"># sleep</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__MODE1<span class="token punctuation">,</span> newmode<span class="token punctuation">)</span>        <span class="token comment"># go to sleep</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__PRESCALE<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span>prescale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__MODE1<span class="token punctuation">,</span> oldmode<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.005</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__MODE1<span class="token punctuation">,</span> oldmode <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">setPWM</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> on<span class="token punctuation">,</span> off<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Sets a single PWM channel"</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__LED0_ON_L<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>channel<span class="token punctuation">,</span> on <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__LED0_ON_H<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>channel<span class="token punctuation">,</span> on <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__LED0_OFF_L<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>channel<span class="token punctuation">,</span> off <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>write<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__LED0_OFF_H<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>channel<span class="token punctuation">,</span> off <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>debug<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"channel: %d  LED_ON: %d LED_OFF: %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>channel<span class="token punctuation">,</span>on<span class="token punctuation">,</span>off<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">setServoPulse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> pulse<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token string">"Sets the Servo Pulse,The PWM frequency must be 50HZ"</span>    pulse <span class="token operator">=</span> pulse<span class="token operator">*</span><span class="token number">4096</span><span class="token operator">/</span><span class="token number">20000</span>        <span class="token comment">#PWM frequency is 50HZ,the period is 20000us</span>    self<span class="token punctuation">.</span>setPWM<span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pulse<span class="token punctuation">)</span> <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>   pwm <span class="token operator">=</span> PCA9685<span class="token punctuation">(</span><span class="token number">0x40</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  pwm<span class="token punctuation">.</span>setPWMFreq<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   <span class="token comment"># setServoPulse(2,2500)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">2500</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pwm<span class="token punctuation">.</span>setServoPulse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>         time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span>             <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2500</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      pwm<span class="token punctuation">.</span>setServoPulse<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>       time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.02</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存文件命名为: pca9685.py,命令行进入该文件所在的路径，运行该Python脚本:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> python pca9685.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行该命令后，便可控制舵机从0度转到180度，再从180度转到0度。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式系统中汉字字库编码集合</title>
      <link href="/2020/08/08/qian-ru-shi-xi-tong-zhong-han-zi-zi-ku-bian-ma-ji-he/"/>
      <url>/2020/08/08/qian-ru-shi-xi-tong-zhong-han-zi-zi-ku-bian-ma-ji-he/</url>
      
        <content type="html"><![CDATA[<h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0 引言"></a>0 引言</h2><p>还记得通常在MCU驱动LCD，OLED是怎样显示汉字的吗？采用取字模工具，生成字模数组，然后要显示某个字符，直接索引这个字符的数组，然后对这个数组数据进行显示就行了，就像这样：<br><img src="http://pic.huangruimin.tech/20190519153008.png"></p><p>最近有开发一个物联网项目，将网络端的发过来的汉字显示到屏幕上，但问题来了，我还不知道网络端要发送具体哪些汉字，我是无法对具体的汉字取模，因此，得想办法先对所有汉字进行取模，或使用字库，于是就有了下文。</p><h2 id="1-字符编码"><a href="#1-字符编码" class="headerlink" title="1 字符编码"></a>1 字符编码</h2><p>先从字符编码说起:<a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">参考阮一峰博客字符编码</a></p><ul><li>ASCII码：一共规定了128个字符的编码，这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的一位统一规定为0。</li><li>非ASCII码：英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够的。</li></ul><blockquote><ul><li>GB2312，GBK，Unicode，UTF-8均为非ASCII编码</li></ul></blockquote><ul><li>Unicode码：如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失。这就是 Unicode，就像它的名字都表示的，这是一种所有符号的编码。</li></ul><blockquote><ul><li>注意：Unicode 只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</li></ul></blockquote><ul><li>UTF-8码:UTF-8 就是在互联网上使用最广的一种 Unicode 的实现方式，是Unicode 的实现方式之一。</li><li>GB2312,GBK：GB2312是常用汉字的专用编码，GBK是所有汉字的专用编码。</li></ul><blockquote><ul><li>注意：GB类的汉字编码与后文的 Unicode 和 UTF-8 是毫无关系的</li></ul></blockquote><h2 id="2-液晶屏汉字显示原理"><a href="#2-液晶屏汉字显示原理" class="headerlink" title="2 液晶屏汉字显示原理"></a>2 液晶屏汉字显示原理</h2><ul><li>ASCII字符显示，由于ASCII字符仅128个，可以实现对每个字符一一取模，且占用MCU的RAM不会过大，此处不再介绍ASCII字符的显示。</li></ul><blockquote><ul><li>为什么显示英文一般不用字库芯片？<br>英文的单词都是由26个字母构成了，加上大小写的区别和其它一些字符，也不过才95个。假如要显示8 * 16像素大小的字符，每一个字符需要16个字节的字库空间，95个字符即是95 * 16=570个字节。即占用570个字节的RAM。对于小型MCU几K字节的RAM来说，绰绰有余了。</li></ul></blockquote><blockquote><ul><li>为什么显示中文需要字库芯片？<br>显示中文的话，需要每一个字的字模，16*16像素大小的中文，每一个中文都要32个字节。GBK收录了中文两万多个，如果要都能显示，需要700多K字节的空间。所以，我们选择了把这些字库放在外部存储器当中，可选择2M的FLASH存储芯片W25Q16做为存储媒介。放个700多K的字库足够了，并且，同时放两种字体的字库都没问题。</li></ul></blockquote><ul><li>常规汉字显示，采用相关的汉字取字模工具(PCtoLCD2002完美版)，取出字模，相关参数设置如下所示：</li></ul><p><img src="http://pic.huangruimin.tech/20190519171854.png"></p><p>由于我采用的液晶屏是逐行显示的，不同的液晶屏采用不同的显示模式，需根据具体情况选择字模。<br>取出“你”字模后，将字模数据复制到notepad++,调整成设置好的16列，21行的样式，在将16进制数据转换成2进制数据,然后将0替换成空格，即可找出汉字“你”的原型。</p><p><img src="http://pic.huangruimin.tech/20190519173234.png"></p><ul><li>对于液晶屏而言，字符，图片的显示都是像素点的点阵显示，因此，只要将上述数组中的数据转换成点阵数据显示到液晶屏中即可，对于二进制位1的位数据，显示出该像素点，对于二进制位0的位数据，不显示该像素点，即可显示出该汉字(暂不考虑颜色显示)。</li></ul><h2 id="3-字符显示的实现"><a href="#3-字符显示的实现" class="headerlink" title="3 字符显示的实现"></a>3 字符显示的实现</h2><p>上面讲到了字符显示的原理，接下来将讲解字符显示的实现，相关代码不依赖于底层，具有很好的移植性,且在文章最后放出了Github链接，要实现该代码的功能，需要以下前提条件：</p><blockquote><ul><li>已经在液晶屏上实现了画点功能，该函数将直接调用该功能</li><li>液晶屏在显示时，逐行扫描，且需要高位在前(参考上一节相关参数设置，其它类型的屏幕可能有所不同)</li></ul></blockquote><p>注：由于代码过长，为不影响阅读，仅放部分关键代码，如有需求，更多请参考文末的Github</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> font<span class="token operator">-&gt;</span>Height<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> font<span class="token operator">-&gt;</span>Width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>ptr <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">Paint_SetPixel</span><span class="token punctuation">(</span>x <span class="token operator">+</span> i<span class="token punctuation">,</span> y <span class="token operator">+</span> j<span class="token punctuation">,</span> Color_Foreground<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">Paint_SetPixel</span><span class="token punctuation">(</span>x <span class="token operator">+</span> i<span class="token punctuation">,</span> y <span class="token operator">+</span> j<span class="token punctuation">,</span> Color_Background<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>font<span class="token operator">-&gt;</span>Width <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ptr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此代码简单地实现了索引字模数组中的一个unsigned char类型的元素中的8位，将该8位绘制成像素点，此为字符显示的基本实现，</p><h2 id="4-任意汉字显示的实现-采用取模法"><a href="#4-任意汉字显示的实现-采用取模法" class="headerlink" title="4 任意汉字显示的实现(采用取模法)"></a>4 任意汉字显示的实现(采用取模法)</h2><p>本节将讲述如何实现任意汉字的显示。<br>需要准备以下工具:</p><ul><li>GBK字库</li><li>取模软件</li><li>二进制文件生成工具<br>如下图所示，且相关工具可从文末Github中直接获取得：<br><img src="http://pic.huangruimin.tech/20190520013605.png"></li></ul><p><strong>具体操作步骤如下:</strong></p><ul><li>将字库取模</li></ul><p>在工具栏处点“打开”按钮，打开gbk_ziku.txt文件，然后根据自己的需要，设置想要的取模方式，然后点工具栏上的“输出”按钮 并等待其完成，完成后会在取模软件所在路径生成了一个temp.txt文件。现在我是按照“宋体、点阵数为16、字重为4、取模为为16*16、对齐设置为左上、方向设置为横向取模，高位在左”的方式来取的字模，也就是我平时TFT液晶屏常用的一种字模。<br><img src="http://pic.huangruimin.tech/20190520012836.png"></p><p>打开temp.txt文件可知， 该文件包含了所有字库的点阵，且采用GBK编码排序：<br><img src="http://pic.huangruimin.tech/20190520013137.png"></p><ul><li>将取模的文件生成二进制文件</li></ul><p>将该temp.txt文件转换为二进制文件，供程序读取。在windows下进入CMD命令控制台，进入到相关文件所在的路径，接着，执行命令ziku.exe temp.txt命令，执行效果如下图所示，执行后将生成一个ziku.bin的文件：<br>  <img src="http://pic.huangruimin.tech/20190520015346.png"></p><ul><li>将二进制文件存入外部Flash，或Linux系统用户文件夹下：<br>得到ziku.bin文件后，可将该字库二进制文件存入外部Flash如W25Q16中(MCU)，或者Linux系统用户文件夹下(Linux)；其中，将该bin文件存放如外部Flash的方法为：</li></ul><blockquote><ul><li>单片机与电脑采用串口连接，单片机与W25Q16采用SPI方式连接。所以，我们只需要给单片机写一个接收串口数据再把数据通过SPI口传输到W25Q16中的程序即可。</li></ul></blockquote><blockquote><ul><li>使用FT232H芯片工具，该工具实现了USB转SPI，USB转I2C的功能，可直接通过PC的USB接口下载到带I2C或SPI接口的Flash或E2PROM中。</li></ul></blockquote><ul><li>检验二进制文件的可用性</li></ul><p>本文将只在Linux系统下进行检验，MCU环境下的检验同理：</p><p>该bin文件的检验程序如下所示(相关程序均已上传文章末尾的Github)：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">Get_GBK_DZK</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>FILE <span class="token operator">*</span>fd<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//字库所在目录</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> <span class="token punctuation">(</span>fd<span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"./ziku.bin"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Open dir error\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token function">Get_GBK_DZK</span><span class="token punctuation">(</span><span class="token string">"你"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Get_GBK_DZK</span><span class="token punctuation">(</span><span class="token string">"好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Get_GBK_DZK</span><span class="token punctuation">(</span><span class="token string">"！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//得到字模 </span><span class="token keyword">void</span> <span class="token function">Get_GBK_DZK</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>code<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">uint8_t</span> GBKH<span class="token punctuation">,</span>GBKL<span class="token punctuation">;</span>                     <span class="token class-name">uint32_t</span> offset<span class="token punctuation">;</span><span class="token class-name">uint8_t</span>  character<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">uint8_t</span><span class="token operator">*</span> characterPtr<span class="token punctuation">;</span>    GBKH<span class="token operator">=</span><span class="token operator">*</span>code<span class="token punctuation">;</span>    GBKL<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>code<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>GBKH<span class="token operator">&gt;</span><span class="token number">0XFE</span><span class="token operator">||</span>GBKH<span class="token operator">&lt;</span><span class="token number">0X81</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    GBKH<span class="token operator">-=</span><span class="token number">0x81</span><span class="token punctuation">;</span>    GBKL<span class="token operator">-=</span><span class="token number">0x40</span><span class="token punctuation">;</span><span class="token comment">//获取字符在bin文件中的偏移量，一个字符占(16*16)/8=32字节。</span>    offset<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">192</span><span class="token operator">*</span>GBKH<span class="token operator">+</span>GBKL<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span><span class="token function">fseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>offset<span class="token punctuation">,</span><span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fseek error\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">//得到字符指针</span><span class="token function">fread</span><span class="token punctuation">(</span>character<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>characterPtr <span class="token operator">=</span> character<span class="token punctuation">;</span><span class="token comment">//显示字符，16*16，一个字符占(16*16)/8=32字节。</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>characterPtr <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">8</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">{</span>characterPtr<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将以上程序保存为:fontTest.c，gcc编译，执行，结果如下图所示：<br><img src="http://pic.huangruimin.tech/20190521002021.png"><br>由执行结果可见，程序能够从二进制bin文件中提取有用信息，并且，该bin文件保存了GBK编码的所有汉字，将“你好”替换成其他任意汉字也是可从bin文件中提取出子模的，生成的bin文件是有效的。<br>接下来讲解程序中的几个注意事项:</p><ul><li>该程序源文件必须以GBK编码或GB2312编码保存(GBK编码兼容GB2312编码)，在notepad++中，保存方式如下图所示：<br><img src="http://pic.huangruimin.tech/20190521002857.png"></li><li>解释下如何获得内存中字符的偏移量：<blockquote><p>GBK编码：每个GBK码由2个字节组成：</p></blockquote></li></ul><blockquote><blockquote><p>第一个字节为0X81~0XF：<br>第二个字节分为两部分：</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>一是0X40-0X7E</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>二是0X80-0XFE</p></blockquote></blockquote></blockquote><p>例如汉字“瑞”的GBK编码为C8 F0，第一字节C8，位于0X81-0XFE之间，第二字节F0，位于0X40-0XFE之间</p><blockquote><p>第一个字节代表的意义称为区，那么GBK里面总共有126个区（0XFE-0X81+1=126）<br>第二个字节代表的意义就是每个区内有多少个汉字，算了一下，一共有190个（0XFE-0X80+0X7E-0X40+2=190）。</p></blockquote><p>那么，GBK一共存储了126X190=23940个汉字。</p><blockquote><blockquote><p>仔细看GBK编码第二个字节两部分中，0X40-0X7E和0X80-0XFE，也就是说它是从0X40~到0XFF，中间的0x7F和最后的0xFF没有用到。</p></blockquote></blockquote><blockquote><blockquote><p>但是为了能够线性查找，我们暂且认为这两个字节也存在，就是我们强制把每个区190个汉字当做每个区192个汉字，不过0X7F和0XFF上没有汉字。</p></blockquote></blockquote><p>定义GBKH代表第一个字节，GBKL代表第二个字节，字库的偏移量offset，那么其计算方法如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">   GBKH<span class="token operator">=</span><span class="token operator">*</span>code<span class="token punctuation">;</span>   GBKL<span class="token operator">=</span><span class="token operator">*</span><span class="token punctuation">(</span>code<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>GBKH<span class="token operator">&gt;</span><span class="token number">0XFE</span><span class="token operator">||</span>GBKH<span class="token operator">&lt;</span><span class="token number">0X81</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   GBKH<span class="token operator">-=</span><span class="token number">0x81</span><span class="token punctuation">;</span>   GBKL<span class="token operator">-=</span><span class="token number">0x40</span><span class="token punctuation">;</span><span class="token comment">//字模大小为16*16/8=32，一个字模占32字节</span>   offset<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token number">192</span><span class="token operator">*</span>GBKH<span class="token operator">+</span>GBKL<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了在控制台窗口打印汉字字模，那么在TFTLCD，OLED，墨水屏等屏幕上，只要先实现了画点功能，那么，显示任意汉字也可以实现的了。</p><h2 id="5-任意汉字显示的实现-采用字库法"><a href="#5-任意汉字显示的实现-采用字库法" class="headerlink" title="5 任意汉字显示的实现(采用字库法)"></a>5 任意汉字显示的实现(采用字库法)</h2><p>最后再介绍一种显示汉字的方法，该方法采用Python实现，直接调用字体库，仅在Linux系统上可实现，下面将以树莓派为例，相关的操作如下：</p><p>首先安装好Pillow库以及必要液晶屏显示必要的SPI库，GPIO库等：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-imaging<span class="token function">sudo</span> pip3 <span class="token function">install</span> spidev<span class="token function">sudo</span> pip3 <span class="token function">install</span> RPi.GPIO<span class="token function">sudo</span> pip3 <span class="token function">install</span> Pillow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装 Pillow 如果报错: ImportError: libopenjp2.so.7: cannot open shared object file: No<br>such file or directory，则先执行如下指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libopenjp2-7-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装必要的字体:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ttf-wqy-zenhei ttf-wqy-microhei<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来是调用微软雅黑字体进行显示的部分示例(python3)，详情代码参考文章末尾留下的Github:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token comment"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> epd7in5b<span class="token keyword">import</span> time<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span>ImageDraw<span class="token punctuation">,</span>ImageFont<span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    epd <span class="token operator">=</span> epd7in5b<span class="token punctuation">.</span>EPD<span class="token punctuation">(</span><span class="token punctuation">)</span>    epd<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Clear..."</span><span class="token punctuation">)</span>    epd<span class="token punctuation">.</span>Clear<span class="token punctuation">(</span><span class="token number">0xFF</span><span class="token punctuation">)</span>        <span class="token comment"># Drawing on the Horizontal image</span>    HBlackimage <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>epd7in5b<span class="token punctuation">.</span>EPD_WIDTH<span class="token punctuation">,</span> epd7in5b<span class="token punctuation">.</span>EPD_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>    HRedimage <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>epd7in5b<span class="token punctuation">.</span>EPD_WIDTH<span class="token punctuation">,</span> epd7in5b<span class="token punctuation">.</span>EPD_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>        <span class="token comment"># Horizontal</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Drawing"</span><span class="token punctuation">)</span>    drawblack <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>HBlackimage<span class="token punctuation">)</span>    drawred <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>HRedimage<span class="token punctuation">)</span>    font24 <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span><span class="token string">'/usr/share/fonts/truetype/wqy/wqy-microhei.ttc'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>    drawblack<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'hello world'</span><span class="token punctuation">,</span> font <span class="token operator">=</span> font24<span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    drawblack<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'7.5inch e-Paper B'</span><span class="token punctuation">,</span> font <span class="token operator">=</span> font24<span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    drawblack<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">u'微雪电子'</span><span class="token punctuation">,</span> font <span class="token operator">=</span> font24<span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>        drawblack<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    drawblack<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    drawblack<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> outline <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>        drawred<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    drawred<span class="token punctuation">.</span>line<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    drawred<span class="token punctuation">.</span>arc<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    drawred<span class="token punctuation">.</span>rectangle<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    drawred<span class="token punctuation">.</span>chord<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">360</span><span class="token punctuation">,</span> fill <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    epd<span class="token punctuation">.</span>display<span class="token punctuation">(</span>epd<span class="token punctuation">.</span>getbuffer<span class="token punctuation">(</span>HBlackimage<span class="token punctuation">)</span><span class="token punctuation">,</span> epd<span class="token punctuation">.</span>getbuffer<span class="token punctuation">(</span>HRedimage<span class="token punctuation">)</span><span class="token punctuation">)</span>    epd<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'traceback.format_exc():\n%s'</span><span class="token punctuation">,</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该代码的精髓在于，先创建一段缓存，然后采用pillow库的相关方法通过字符串获取对应字库中字符的字模，将字模数据存入缓存中，然后将缓存数据显示到屏幕上，详情参考pillow库中的Image,ImageDraw,ImageFont方法对应的手册。</p><blockquote><p>注意，代码中的中文采用UTF-8编码，保存的时候，为防止乱码，必须以UTF-8编码保存(可采用notepad++工具保存为UTF-8编码)</p></blockquote><p>最后，放出相关代码的Github：<br><a href="https://github.com/RuiminHuang/fontDisplay">软件工具,字模bin文件校验代码</a><br><a href="https://github.com/RuiminHuang/e-Paper">刷屏代码示例</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RPi-OpenCV_IDE及图像存储的数据结构</title>
      <link href="/2019/10/24/rpi-opencv-ide-ji-tu-xiang-cun-chu-de-shu-ju-jie-gou/"/>
      <url>/2019/10/24/rpi-opencv-ide-ji-tu-xiang-cun-chu-de-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>本章将首先讲解开发OpenCV的基本的IDE，以方便代码提示，同时方便阅读底层源码，接着，讲解图像存储的基本数据结构。</p><h2 id="1-IDE"><a href="#1-IDE" class="headerlink" title="1 IDE"></a>1 IDE</h2><p>之前两章开发OpenCV均未使用到IDE，比如开发Python的代码，用记事本即可写，需要时执行该脚本即可，当开发C++的代码则需要先Cmake生成Makefile，再make编译，最后执行，为提高效率，首先介绍常用的IDE的相关配置，以及如何将OpenCV集成到该工程中。</p><p>说明：</p><ul><li>关于Python中，目前采用的是OpenCV4，为什么却是import cv2呢？</li></ul><blockquote><p>OpenCV1采用C语言编写，OpenCV2，OpenCV3，OpenCV4均采用C++编写，在Python中，cv1指代底 层算法为C语言的OpenCV版本，cv2指代底层算法为C ++语言的版本，所以，在Python中，import cv2可能是OpenCV2,OpenCV3,OpenCV4等版本。</p></blockquote><ul><li>Python版本的OpenCV能不能看到底层的Python实现？</li></ul><blockquote><p>不能，因为底层实现为C++，OpenCV仅仅提供了Python接口，同时OpenCV还提供了C#，java，Andriod等的接口。</p></blockquote><ul><li>C++版本的OpenCV，推荐用什么IDE呢？</li></ul><blockquote><p>因为工程是通过Cmake构建的，首先应该选择支持构建Cmake工程的IDE，在Linux(Raspbian)平台下，推荐Qt Creator，除了采用Cmake构建OpenCV工程外，Qt Creator还支持采用qmake构建OpenCV工程；此外，Qt creator还支持底层接口函数跳转，方便跳转到对应的函数中，方便OpenCV的算法研究，算法移植等工作。</p></blockquote><h3 id="1-1-Python3"><a href="#1-1-Python3" class="headerlink" title="1.1 Python3"></a>1.1 Python3</h3><p>若在树莓派平台采用Raspbian系统结合Python3开发OpenCV，由于Python仅提供相应的接口，无法查阅底层的实现，加上Python本身的简洁优雅，使用树莓派自带的Thonny Python IDE即可，如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190901022724.png"></p><p>点击Load，打开00_Test_OpenCV.py，点击Run，即可运行相应的Python脚本，此外，该IDE支持断点调试，如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190901023321.png"></p><h3 id="1-2-C"><a href="#1-2-C" class="headerlink" title="1.2 C++"></a>1.2 C++</h3><p>在C++开发环境中，首选Qt Creator，方便添加依赖，同时支持跳转底层代码，开发与研究两不误；同时，结合Qt自带的UI界面，方便做成桌面应用；并且，支持添加树莓派自带bcm2835，wiringPi等库，方便进行底层开发；结合C ++的特点，向上支持应用开发，向下支持底层开发。</p><h4 id="1-2-1-安装Qt-Creator"><a href="#1-2-1-安装Qt-Creator" class="headerlink" title="1.2.1 安装Qt Creator"></a>1.2.1 安装Qt Creator</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> upgrade<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qt5-default<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> qtcreator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装好之后，即可在菜单-&gt;编程界面中找到Qt Creator，如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190901012530.png"></p><h4 id="1-2-2-创建并运行Cmake项目"><a href="#1-2-2-创建并运行Cmake项目" class="headerlink" title="1.2.2 创建并运行Cmake项目"></a>1.2.2 创建并运行Cmake项目</h4><p>打开Qt Creator，新建工程，选择纯C++项目：</p><p><img src="http://pic.huangruimin.tech/20190901014412.png"></p><p>选择合适的路径：</p><p><img src="http://pic.huangruimin.tech/20190901014532.png"></p><p>选择Cmake：</p><p><img src="http://pic.huangruimin.tech/20190901014622.png"></p><p>一般选择默认编译套件即可：</p><p><img src="http://pic.huangruimin.tech/20190901014720.png"></p><p>默认的工程中，已经包含了Cmakelists.txt和main.cpp文件，现在修改Cmakelists.txt和main.cpp文件为《树莓派OpenCV系列教程1：开发环境搭建》的内容，如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190901020105.png"><br><img src="http://pic.huangruimin.tech/20190901020016.png"></p><p>若Qt Creator提示有错误，一般Cmakelists.txt有误。</p><p>此时,点击Qt Creator左下角的绿色三角形，将运行程序，打开摄像头，并输出相关信息，如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190901021139.png"></p><p>程序设定了按下q键即可退出窗口，此时，按下q键即可退出。</p><h4 id="1-2-3-其它使用说明"><a href="#1-2-3-其它使用说明" class="headerlink" title="1.2.3 其它使用说明"></a>1.2.3 其它使用说明</h4><p>若想跳转到具体的函数，可按住Ctrl，再单击相应的函数即可，跳转到具体的函数之后，有相应的函数说明，方便查阅，如下图：</p><p><img src="http://pic.huangruimin.tech/20190901021813.png"></p><p>并且，Qt Creator支持编程提示，错误提示等功能，能大幅提高效率，如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190901022115.png"></p><h2 id="2-图像存储的数据结构"><a href="#2-图像存储的数据结构" class="headerlink" title="2 图像存储的数据结构"></a>2 图像存储的数据结构</h2><p>任何图像处理算法，都是从操作每个像素点开始的。即使我们不会使用OpenCV提供的图像处理算法，只要了解图像处理算法的基本原理，也可以写出具有相同功能的程序。接下来，我们首先讲解图像存储的基本数据结构，接着，讲解如何访问图像中的具体某个像素点，将分为Python3和C++进行讲解。</p><h3 id="2-1-Python3"><a href="#2-1-Python3" class="headerlink" title="2.1 Python3"></a>2.1 Python3</h3><h4 id="2-1-1-numpy基础"><a href="#2-1-1-numpy基础" class="headerlink" title="2.1.1 numpy基础"></a>2.1.1 numpy基础</h4><p>在Python中OpenCV图像读取(imread) 读入的数据格式是numpy的ndarray数据格式，此外，Python在数据计算领域火爆，numpy功不可没，所以，在讲解Python图像存储数据结构之前，有必要先讲解涉及到的numpy的相关操作：</p><h5 id="ndarray初始化数组"><a href="#ndarray初始化数组" class="headerlink" title="ndarray初始化数组"></a>ndarray初始化数组</h5><p>Python3：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># One-dimensional array</span>A1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># Two-dimensional array</span>A2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A1: \n%s'</span><span class="token operator">%</span>A1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A2: \n%s'</span><span class="token operator">%</span>A2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A1<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span>A2<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ndarray的属性"><a href="#ndarray的属性" class="headerlink" title="ndarray的属性"></a>ndarray的属性</h5><table><thead><tr><th>属性名称</th><th>含义</th></tr></thead><tbody><tr><td>ndarray.ndim</td><td>数组的维度,等于Rank</td></tr><tr><td>ndarray.shape</td><td>(行数, 列数)</td></tr><tr><td>ndarray.size</td><td>元素总个数 = 列数 * 行数</td></tr><tr><td>ndarray.dtype</td><td>数组元素数据类型</td></tr><tr><td>ndarray.itemsize</td><td>数组中每个元素,字节大小</td></tr></tbody></table><p>Python3：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A2.ndim = %d'</span> <span class="token operator">%</span> A2<span class="token punctuation">.</span>ndim<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A2.shape'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>A2<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A2.size = %d'</span> <span class="token operator">%</span> A2<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A2.dtype = %s'</span><span class="token operator">%</span>A2<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A2.itemsize = %d'</span><span class="token operator">%</span>A2<span class="token punctuation">.</span>itemsize<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">A2<span class="token punctuation">.</span>ndim <span class="token operator">=</span> <span class="token number">2</span>A2<span class="token punctuation">.</span>shape<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>A2<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">6</span>A2<span class="token punctuation">.</span>dtype <span class="token operator">=</span> int64A2<span class="token punctuation">.</span>itemsize <span class="token operator">=</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="ndarray的切片操作"><a href="#ndarray的切片操作" class="headerlink" title="ndarray的切片操作"></a>ndarray的切片操作</h5><p>对数组进行切片操作，指的是获取数组的其中某一个子区域，具体切片操作，详情见如下图：</p><h6 id="一维数组的切片操作"><a href="#一维数组的切片操作" class="headerlink" title="一维数组的切片操作"></a>一维数组的切片操作</h6><p><img src="http://pic.huangruimin.tech/20190901214035.png"><br>其中：<br>A = np.arange(10)表示生成0到9，步长为1的一维数组。</p><p>A[0:3:1]是A[0:3]及A[:3]的完整写法，表示取一维数组A中索引从0到3(但不包含3)，步长为1的元素。</p><p>A[-1:5:-1]中：这里start=-1代表最后一个元素，表示取一维数组A中索引从最后一个到第5个(但不包含5)，步长为-1的元素。</p><p>A[ : : -1]表示将一维数组A中的元素逆序取出</p><p>同理：</p><p>A[ : : 1]表示将一维数组A中的元素顺序取出</p><h6 id="多维数组的切片操作"><a href="#多维数组的切片操作" class="headerlink" title="多维数组的切片操作"></a>多维数组的切片操作</h6><p>对于多维数组的切片操作，中间需要使用逗号进行分隔，如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190901221239.png"></p><p>对于图像数据结构ndarray的切片操作，可参考上图。</p><h4 id="2-1-2-OpenCV中图像数据结构ndarray"><a href="#2-1-2-OpenCV中图像数据结构ndarray" class="headerlink" title="2.1.2 OpenCV中图像数据结构ndarray"></a>2.1.2 OpenCV中图像数据结构ndarray</h4><p>下图是OpenCV中BGR格式的数据结构：</p><p><img src="http://pic.huangruimin.tech/20190901221911.png"></p><p>第一维度 : Height 高度, 对应这张图片的 nRow行数</p><p>第二维度 : Width 宽度, 对应这张图片的nCol 列数</p><p>第三维度: Value BGR三通道的值.</p><p>BGR 分别代表：B: Blue 蓝色，G: Green 绿色，R: Red 红色</p><h4 id="2-1-3-从ndarray中取出像素点值"><a href="#2-1-3-从ndarray中取出像素点值" class="headerlink" title="2.1.3 从ndarray中取出像素点值"></a>2.1.3 从ndarray中取出像素点值</h4><p>注意，由于历史原因，OpenCV存储图像的数据结构采用的BGR格式，而非RGB，下面，将读取一幅图片，并把这幅图片的像素分片打印出来。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'color.jpg'</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'image'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token number">102</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190902000858.png"></p><p>通过对图像数据结构ndarray的切片操作，打印出了4个像素点的值，需要注意的是，每个点的像素值是以(B,G,R)的形式存储。</p><h3 id="2-2-C"><a href="#2-2-C" class="headerlink" title="2.2 C++"></a>2.2 C++</h3><p>与Python不同，在OpenCV4版本中(OpenCV1例外)，提供了Mat类作为图像容器，该对象利用了内存管理(非严格意义上的)，可以避免在退出程序前忘记释放内存造成的内存泄露。</p><p>总而言之，Mat就是一个类，由两个数据部分组成：矩阵头(包含矩阵尺寸、存储方法、存储地址等信息)和一个存储所有像素值的矩阵(根据所选存储方法的不同，矩阵可以是不同的维数)的指针。</p><h4 id="2-2-1-创建矩阵及输出矩阵的常用方法"><a href="#2-2-1-创建矩阵及输出矩阵的常用方法" class="headerlink" title="2.2.1 创建矩阵及输出矩阵的常用方法"></a>2.2.1 创建矩阵及输出矩阵的常用方法</h4><p>当使用拷贝构造函数，或对矩阵进行复制时，只复制信息头和矩阵指针，而不复制矩阵。</p><p>来看下面这段代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Mat A,CA = imread("1.jpg"，CV_LOAD_IMAGE_COLOR);Mat B(A);C = A;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在以上代码中，构造函数Mat B(A),赋值操作C=A,均只是复制矩阵A的信息头和矩阵指针，而不复制矩阵。</p><p>如果需要复制矩阵进行操作(实际不建议大量复制矩阵，因为图像一般比较占内存)，可使用以下操作：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Mat A,B,C;A = imread("1.jpg"，CV_LOAD_IMAGE_COLOR);B = A.clone();A.copyTo(C);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样一来，B和C均复制了A的图像矩阵。</p><p>此外，可直观地使用以下方法创建矩阵：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Mat M(2,2,CV_8UC3,Scalar(0,0,255));cout &lt;&lt; "M = " &lt;&lt; endl &lt;&lt; " " &lt;&lt; M &lt;&lt; endl &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">M=[0,0,255,0,0,255;0,0,255,0,0,255]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>下面将通过一个综合示例来演示创建矩阵及矩阵的输出方法：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include "opencv2/core/core.hpp"#include "opencv2/highgui/highgui.hpp"#include &lt;iostream&gt;using namespace std;using namespace cv;int main(int,char**){    //Create    Mat I = Mat::eye(4, 4, CV_64F);    I.at&lt;double&gt;(1,1) = CV_PI;    //Display    cout &lt;&lt; "I=\n" &lt;&lt; I &lt;&lt; ";\n" &lt;&lt; endl;    //Create    Mat r = Mat(3, 4, CV_8UC3);    randu(r, Scalar::all(0), Scalar::all(255));    //Display    cout &lt;&lt; "(OpenCV default Style)=\n" &lt;&lt; r &lt;&lt; ";" &lt;&lt; endl &lt;&lt; endl;    cout &lt;&lt; "(Python Style)=\n" &lt;&lt; format(r, Formatter::FMT_PYTHON) &lt;&lt; ";" &lt;&lt; endl &lt;&lt; endl;    cout &lt;&lt; "(Numpy Style)=\n" &lt;&lt;  format(r, Formatter::FMT_NUMPY)&lt;&lt; ";" &lt;&lt; endl &lt;&lt; endl;    cout &lt;&lt; "(Comma Style)=\n" &lt;&lt; format(r, Formatter::FMT_CSV)&lt;&lt; ";" &lt;&lt; endl&lt;&lt; endl;    cout &lt;&lt; "(C Style)=\n" &lt;&lt;  format(r, Formatter::FMT_C) &lt;&lt; ";" &lt;&lt; endl &lt;&lt; endl;    //Create    Point2f p(6, 2);    //Display    cout &lt;&lt; "Two Dimension Point p =\n" &lt;&lt; p &lt;&lt; ";\n" &lt;&lt; endl;    //Create    Point3f p3f(8, 2, 0);    //Display    cout &lt;&lt; "Three Dimension Point p3f =\n" &lt;&lt; p3f &lt;&lt; ";\n" &lt;&lt; endl;    //Create    vector&lt;float&gt; v;    v.push_back(3);    v.push_back(5);    v.push_back(7);    //Display    cout &lt;&lt; "Point based on vector shortvec =\n" &lt;&lt; Mat(v) &lt;&lt; ";\n"&lt;&lt;endl;    //Create    vector&lt;Point2f&gt; points(10);    for (size_t i = 0; i &lt; points.size(); ++i)    {        points[i] = Point2f((float)(i * 5), (float)(i % 7));    }    //Display    cout &lt;&lt; "Two Dimension points =\n" &lt;&lt; points&lt;&lt;";";    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相应的输出结果如下所示：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">I=[1, 0, 0, 0; 0, 3.141592653589793, 0, 0; 0, 0, 1, 0; 0, 0, 0, 1];(OpenCV default Style)=[ 91,   2,  79, 179,  52, 205, 236,   8, 181, 239,  26, 248; 207, 218,  45, 183, 158, 101, 102,  18, 118,  68, 210, 139; 198, 207, 211, 181, 162, 197, 191, 196,  40,   7, 243, 230];(Python Style)=[[[ 91,   2,  79], [179,  52, 205], [236,   8, 181], [239,  26, 248]], [[207, 218,  45], [183, 158, 101], [102,  18, 118], [ 68, 210, 139]], [[198, 207, 211], [181, 162, 197], [191, 196,  40], [  7, 243, 230]]];(Numpy Style)=array([[[ 91,   2,  79], [179,  52, 205], [236,   8, 181], [239,  26, 248]],       [[207, 218,  45], [183, 158, 101], [102,  18, 118], [ 68, 210, 139]],       [[198, 207, 211], [181, 162, 197], [191, 196,  40], [  7, 243, 230]]], dtype='uint8');(Comma Style)= 91,   2,  79, 179,  52, 205, 236,   8, 181, 239,  26, 248207, 218,  45, 183, 158, 101, 102,  18, 118,  68, 210, 139198, 207, 211, 181, 162, 197, 191, 196,  40,   7, 243, 230;(C Style)={ 91,   2,  79, 179,  52, 205, 236,   8, 181, 239,  26, 248, 207, 218,  45, 183, 158, 101, 102,  18, 118,  68, 210, 139, 198, 207, 211, 181, 162, 197, 191, 196,  40,   7, 243, 230};Two Dimension Point p =[6, 2];Three Dimension Point p3f =[8, 2, 0];Point based on vector shortvec =[3; 5; 7];Two Dimension points =[0, 0; 5, 1; 10, 2; 15, 3; 20, 4; 25, 5; 30, 6; 35, 0; 40, 1; 45, 2];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-从Mat中取出像素点"><a href="#2-2-2-从Mat中取出像素点" class="headerlink" title="2.2.2 从Mat中取出像素点"></a>2.2.2 从Mat中取出像素点</h4><p>本节，将介绍C++中常用的从Mat类的实例化对象中取出像素点的3种方法，并且，每种方法均对颜色空间进行缩减，即：</p><p>0~100范围的像素值为0；</p><p>100~200范围的像素值为100；</p><p>200~255范围的像素值为200。</p><p>并且，每种方法均统计了运行时间。</p><h5 id="用指针访问像素"><a href="#用指针访问像素" class="headerlink" title="用指针访问像素"></a>用指针访问像素</h5><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;opencv2/core/core.hpp&gt;#include &lt;opencv2/highgui/highgui.hpp&gt;#include &lt;iostream&gt;using namespace std;using namespace cv;void colorReduce(Mat&amp; inputImage, Mat&amp; outputImage, int div);int main( ){    Mat srcImage = imread("color.jpg");    imshow("srcImage",srcImage);    Mat dstImage;    dstImage.create(srcImage.rows,srcImage.cols,srcImage.type());    double time0 = static_cast&lt;double&gt;(getTickCount());    colorReduce(srcImage,dstImage,100);    time0 = ((double)getTickCount() - time0)/getTickFrequency();    cout&lt;&lt;"This function  waste time:"&lt;&lt;time0&lt;&lt;" second"&lt;&lt;endl;    imshow("dstImage",dstImage);    waitKey(0);}void colorReduce(Mat&amp; inputImage, Mat&amp; outputImage, int div){    outputImage = inputImage.clone();    int rowNumber = outputImage.rows;        //Number of columns * Number of channels = number of elements per line    int colNumber = outputImage.cols*outputImage.channels();    for(int i = 0;i &lt; rowNumber;i++)    {        //Get the first address of the i-th line        uchar* data = outputImage.ptr&lt;uchar&gt;(i);        for(int j = 0;j &lt; colNumber;j++)        {            data[j] = data[j]/div*div;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在该程序中，先获取每一行的元素的个数，在双重遍历中，先获取第i行的首地址，然后通过指针获取第i的第j个元素，再对该元素进行处理。</p><p>该函数的运行效果如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190902023319.png"></p><p>可见，遍历所有像素点并进行处理的时间为0.02秒左右</p><h5 id="用迭代器访问像素"><a href="#用迭代器访问像素" class="headerlink" title="用迭代器访问像素"></a>用迭代器访问像素</h5><p>用迭代器访问像素点的操作如下程序所示：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;opencv2/core/core.hpp&gt;#include &lt;opencv2/highgui/highgui.hpp&gt;#include &lt;iostream&gt;using namespace std;using namespace cv;void colorReduce(Mat&amp; inputImage, Mat&amp; outputImage, int div);int main( ){    Mat srcImage = imread("color.jpg");    imshow("srcImage",srcImage);    Mat dstImage;    dstImage.create(srcImage.rows,srcImage.cols,srcImage.type());    double time0 = static_cast&lt;double&gt;(getTickCount());    colorReduce(srcImage,dstImage,100);    time0 = ((double)getTickCount() - time0)/getTickFrequency();    cout&lt;&lt;"This function  waste time:"&lt;&lt;time0&lt;&lt;" second"&lt;&lt;endl;    imshow("dstImage",dstImage);    waitKey(0);}void colorReduce(Mat&amp; inputImage, Mat&amp; outputImage, int div)  {  outputImage = inputImage.clone();//Start position iteratorMat_&lt;Vec3b&gt;::iterator it = outputImage.begin&lt;Vec3b&gt;(); //End position iteratorMat_&lt;Vec3b&gt;::iterator itend = outputImage.end&lt;Vec3b&gt;();for(;it != itend;++it)  {(*it)[0] = (*it)[0]/div*div;  (*it)[1] = (*it)[1]/div*div;  (*it)[2] = (*it)[2]/div*div;}  }  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数运行效果如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190902025830.png"></p><p>在该方法中，直接使用迭代器进行处理，采用迭代器访问相对于数组越界的可能性，还是非常安全的，经实测，该方法遍历所有像素点并进行处理的时间为0.04秒左右。</p><p>可见，采用迭代器访问像素点的方法比采用指针访问像素点的方法慢了近一倍，因此，为提高处理速度，建议采用指针访问像素点。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RPi-OpenCV_摄像头的基本使用</title>
      <link href="/2018/10/10/rpi-opencv-she-xiang-tou-de-ji-ben-shi-yong/"/>
      <url>/2018/10/10/rpi-opencv-she-xiang-tou-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>本章将介绍计算机视觉中最核心传感器-摄像头的基本使用，主要讲解了CSI摄像头，USB摄像头，网络摄像头的基本使用。</p><h2 id="1-CSI摄像头"><a href="#1-CSI摄像头" class="headerlink" title="1 CSI摄像头"></a>1 CSI摄像头</h2><p>首先将讲解CSI摄像头的使用：</p><p><img src="http://pic.huangruimin.tech/20190831153253.png"></p><h3 id="1-1-picamera"><a href="#1-1-picamera" class="headerlink" title="1.1 picamera"></a>1.1 picamera</h3><p>树莓派自带的摄像头为CSI摄像头，在树莓派平台中，发行版的Raspbian默认安装了树莓派平台的picamera:</p><p><a href="https://picamera.readthedocs.io/en/release-1.13/index.html">相关官方文档链接</a></p><p>执行该脚本将录制一段10秒的视频到本地：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> picameracamera <span class="token operator">=</span> picamera<span class="token punctuation">.</span>PiCamera<span class="token punctuation">(</span><span class="token punctuation">)</span>camera<span class="token punctuation">.</span>resolution <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span>camera<span class="token punctuation">.</span>start_recording<span class="token punctuation">(</span><span class="token string">'my_video.h264'</span><span class="token punctuation">)</span>camera<span class="token punctuation">.</span>wait_recording<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>camera<span class="token punctuation">.</span>stop_recording<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但由于picamera输出的数据是RGB格式的，需要通过Numpy转换为BGR格式，代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> picamera<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">with</span> picamera<span class="token punctuation">.</span>PiCamera<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> camera<span class="token punctuation">:</span>    camera<span class="token punctuation">.</span>resolution <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span>    camera<span class="token punctuation">.</span>framerate <span class="token operator">=</span> <span class="token number">24</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    image <span class="token operator">=</span> np<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">240</span> <span class="token operator">*</span> <span class="token number">320</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    <span class="token comment"># save as bgr format for OpenCV</span>    camera<span class="token punctuation">.</span>capture<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">'bgr'</span><span class="token punctuation">)</span>    image <span class="token operator">=</span> image<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">320</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，picamera 也提供了PIRGBArray对象，用来保存RGB 图像数据,下面将在capture_continuous函数中，不断地把RGB转换成BGR图像，供OpenCV显示，以形成视频流。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> picamera<span class="token punctuation">.</span>array <span class="token keyword">import</span> PiRGBArray<span class="token keyword">from</span> picamera <span class="token keyword">import</span> PiCamera<span class="token keyword">import</span> time<span class="token keyword">import</span> cv2<span class="token comment"># initialize the camera and grab a reference to the raw camera capture</span>camera <span class="token operator">=</span> PiCamera<span class="token punctuation">(</span><span class="token punctuation">)</span>camera<span class="token punctuation">.</span>resolution <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span>camera<span class="token punctuation">.</span>framerate <span class="token operator">=</span> <span class="token number">32</span>rawCapture <span class="token operator">=</span> PiRGBArray<span class="token punctuation">(</span>camera<span class="token punctuation">)</span><span class="token comment"># allow the camera to warmup</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token comment"># capture frames from the camera</span><span class="token keyword">for</span> frame <span class="token keyword">in</span> camera<span class="token punctuation">.</span>capture_continuous<span class="token punctuation">(</span>rawCapture<span class="token punctuation">,</span> <span class="token builtin">format</span><span class="token operator">=</span><span class="token string">"bgr"</span><span class="token punctuation">,</span> use_video_port<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    image <span class="token operator">=</span> frame<span class="token punctuation">.</span>array    <span class="token comment"># show the frame</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Frame"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span>    <span class="token comment"># prepare for net stream</span>    rawCapture<span class="token punctuation">.</span>truncate<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但由于picamera为树莓派或兼容树莓派平台专用的库，且仅能供树莓派使用，下面将介绍更为通用的使用方法。</p><h3 id="1-2-V4L2"><a href="#1-2-V4L2" class="headerlink" title="1.2 V4L2"></a>1.2 V4L2</h3><p>目前,CSI摄像头可通过picamera等库进行调用，但在Raspbian系统中，并不属于一个video设备而存在，若想将CSI摄像头作为一个视频设备文件使用，则要开启V4L2(Video for Linux 2)模块以开启：</p><p>开启方法如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾添加一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bcm2835-v4l2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时，CSI摄像头便成为了一个video设备，此时在中断执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-ltrh</span> /dev/video*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>便可查看到video设备，其中video0便是CSI摄像头：</p><p><img src="http://pic.huangruimin.tech/20190831152421.png"></p><p>该video设备可同时供Python与C++调用，具体使用请参考《树莓派OpenCV系列教程1：开发环境搭建》的例程。</p><h2 id="2-USB摄像头"><a href="#2-USB摄像头" class="headerlink" title="2 USB摄像头"></a>2 USB摄像头</h2><p>树莓派除了支持CSI摄像头外，同样也支持USB摄像头：</p><p><img src="http://pic.huangruimin.tech/20190831153829.png"></p><p>若采用USB摄像头，若摄像头本身免驱，接入树莓派后，将直接识别的video设备，在/dev下可找到对应的video设备，在中断，输入命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-ltrh</span> /dev/video*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可查询到新接入的video设备。</p><p>但使用Python，C++使用摄像头，区分不同的摄像头时：</p><p>c++：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">VideoCapture cap(0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>python：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传入参数0代表使用CSI摄像头，传入其它参数代表使用其它video序号对应的USB摄像头。<br>具体使用请参考《1.OpenCV开发环境搭建》的例程。</p><h2 id="3-网络摄像头"><a href="#3-网络摄像头" class="headerlink" title="3 网络摄像头"></a>3 网络摄像头</h2><p>除了使用CSI摄像头，USB摄像头外，还可以将手机变成一个IP摄像头，具体方法如下：</p><p>在手机应用市场中，搜索这款名为IP摄像头的APP，图表如下：</p><p><img src="http://pic.huangruimin.tech/20190831160527.png"></p><p>安装好后，连接wifi，确保树莓派和手机处在同一局域网内，手机打开IP摄像头软件，同时点击打开IP摄像头服务器，即可将手机变成一个IP摄像头。如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190831161321.png"></p><p>此时,在浏览器中打开该IP地址，输入用户名:admin，密码:admin，即可浏览摄像头画面：</p><p><img src="http://pic.huangruimin.tech/20190831161042.png"></p><p>此时说明手机成为了一个IP摄像头，此摄像头可供OpenCV调用。</p><p>OpenCV调用IP摄像头的源程序如下：</p><h3 id="3-1-Python3"><a href="#3-1-Python3" class="headerlink" title="3.1 Python3"></a>3.1 Python3</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token triple-quoted-string string">'''Waveshare OpenCV Tutorial01_IP_Camera.pyA demo to show whether The OpenCV and IP camera is well installed'''</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"OpenCV Version:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 0: use CSI camera,1：use USB camera</span>    ip_camera_url <span class="token operator">=</span> <span class="token string">'http://admin:admin@192.168.10.215:8081'</span>    cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span>ip_camera_url<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">not</span> cap<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"can't open this camera"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ret<span class="token punctuation">,</span> FrameImage <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ret <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'Camera Capture'</span><span class="token punctuation">,</span>FrameImage<span class="token punctuation">)</span>            <span class="token comment">#Press Q to quit</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>__doc__<span class="token punctuation">)</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Release resource</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下图所示：<br><img src="http://pic.huangruimin.tech/20190831172850.png"></p><h3 id="3-2-C"><a href="#3-2-C" class="headerlink" title="3.2 C++"></a>3.2 C++</h3><p>相应地，C++程序读取网络摄像头的程序如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;opencv2/opencv.hpp&gt;#include&lt;opencv2/highgui/highgui.hpp&gt;#include&lt;opencv2/imgproc/imgproc.hpp&gt;using namespace std;using namespace cv;int main(){cout &lt;&lt; "Waveshare OpenCV Tutorial"&lt;&lt; endl;cout &lt;&lt; "00_Test_OpenCV"&lt;&lt;endl;cout &lt;&lt; "A demo to show whether The OpenCV and IP camera is well installed" &lt;&lt;endl;cout &lt;&lt; endl;cout &lt;&lt; "OpenCV Version:" &lt;&lt; CV_VERSION &lt;&lt; endl;const string ip_camera_url = "http://admin:admin@192.168.10.215:8081";VideoCapture cap(ip_camera_url);if(!cap.isOpened()){cout&lt;&lt;"can't open this camera"&lt;&lt;endl;return -1;}Mat FrameImage;while(1){cap&gt;&gt;FrameImage;imshow("Camera Capture",FrameImage);//Press Q to quitif(char(waitKey(1)) == 'q'){break;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行效果如下图所示：<br><img src="http://pic.huangruimin.tech/20190831181427.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RPi-OpenCV_开发环境搭建</title>
      <link href="/2018/10/07/rpi-opencv-kai-fa-huan-jing-da-jian/"/>
      <url>/2018/10/07/rpi-opencv-kai-fa-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<p>本章将介绍OpenCV开发环境的搭建，搭建的版本为OpenCV4.1.0，同时支持Python3和C++，在搭建好后，将通过一个C++和Python的Demo打开CSI摄像头来测试开发环境是否搭建完成。</p><h2 id="1-烧录系统"><a href="#1-烧录系统" class="headerlink" title="1 烧录系统"></a>1 烧录系统</h2><p>本教程采用的镜像是树莓派官方2019年7月10日发布的发行版镜像，代号Buster，如下图所示：<br><img src="http://pic.huangruimin.tech/20190821152022.png"></p><h2 id="2-基本设置"><a href="#2-基本设置" class="headerlink" title="2 基本设置"></a>2 基本设置</h2><h3 id="2-1-把目录扩展到整个TF卡"><a href="#2-1-把目录扩展到整个TF卡" class="headerlink" title="2.1 把目录扩展到整个TF卡"></a>2.1 把目录扩展到整个TF卡</h3><p>本次搭建OpenCV开发环境，至少选择16G的TF卡，为了充分利用TF的存储空间，需要将TF卡空间扩展到整个TF卡。<br>在命令行输入命令，进入树莓派配置界面，用上下左右切换光标位置。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> raspi-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://pic.huangruimin.tech/20190830130336.png"><br><img src="http://pic.huangruimin.tech/20190830130406.png"></p><h3 id="2-2-开启摄像头"><a href="#2-2-开启摄像头" class="headerlink" title="2.2 开启摄像头"></a>2.2 开启摄像头</h3><p>作为开源计算机视觉库，主要进行图像处理，对摄像头图像数据进行处理是主要需求，因此，开启摄像头是很有必要的。</p><h4 id="2-2-1-启用摄像头"><a href="#2-2-1-启用摄像头" class="headerlink" title="2.2.1 启用摄像头"></a>2.2.1 启用摄像头</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> raspi-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入Interfacing Options-&gt;Camera-&gt;Yes，即可启用摄像头。<br>检测摄像头是否正常，可以使用以下命令进行检测：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">raspivid <span class="token parameter variable">-t</span> <span class="token number">0</span> <span class="token parameter variable">-cs</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-2-准备视频流设备"><a href="#2-2-2-准备视频流设备" class="headerlink" title="2.2.2 准备视频流设备"></a>2.2.2 准备视频流设备</h4><p>在OpenCV中，若要读取摄像头数据，需要开启v4l2(video for linux 2)，开启后，摄像头设备文件为/dev/video0，OpenCV将从该文件中读取视频流文件。</p><p>开启方法如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/modules<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾添加一行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bcm2835-v4l2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-更换软件源"><a href="#2-3-更换软件源" class="headerlink" title="2.3 更换软件源"></a>2.3 更换软件源</h3><p>鉴于国内网络环境下载各大镜像，软件包速度慢的问题，需要更换软件源，以防下载慢，且在本教程中，统一更换为清华源。</p><h4 id="2-3-1-更换树莓派软件源"><a href="#2-3-1-更换树莓派软件源" class="headerlink" title="2.3.1 更换树莓派软件源"></a>2.3.1 更换树莓派软件源</h4><p>包括系统源与系统更新源，操作方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编辑 `/etc/apt/sources.list` 文件，删除原文件所有内容，用以下内容取代：</span>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contribdeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib<span class="token comment"># 编辑 `/etc/apt/sources.list.d/raspi.list` 文件，删除原文件所有内容，用以下内容取代：</span>deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图所示：<br><img src="http://pic.huangruimin.tech/20190830132453.png"><br><img src="http://pic.huangruimin.tech/20190830132542.png"></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/">清华软件源Raspbian官方说明</a></p><h4 id="2-3-2-更换pip软件源"><a href="#2-3-2-更换pip软件源" class="headerlink" title="2.3.2 更换pip软件源"></a>2.3.2 更换pip软件源</h4><p>为加速Python pip安装速度，特更改Python软件源，操作方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> pip <span class="token parameter variable">-U</span>pip config <span class="token builtin class-name">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">清华软件源Pypi官方说明</a></p><h3 id="2-4-重启"><a href="#2-4-重启" class="headerlink" title="2.4 重启"></a>2.4 重启</h3><p>以上步骤均完成之后，需要进行重启才生效，重启命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-安装OpenCV所需要的库"><a href="#3-安装OpenCV所需要的库" class="headerlink" title="3 安装OpenCV所需要的库"></a>3 安装OpenCV所需要的库</h2><h3 id="3-1-安装numpy"><a href="#3-1-安装numpy" class="headerlink" title="3.1 安装numpy"></a>3.1 安装numpy</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> pip3 <span class="token function">install</span> numpy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-安装OpenCV所需的依赖"><a href="#3-2-安装OpenCV所需的依赖" class="headerlink" title="3.2 安装OpenCV所需的依赖"></a>3.2 安装OpenCV所需的依赖</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential <span class="token function">git</span> cmake pkg-config <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libjpeg8-dev <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libtiff5-dev <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libjasper-dev <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libpng12-dev <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libavcodec-dev libavformat-dev libswscale-dev libv4l-dev <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgtk2.0-dev <span class="token parameter variable">-y</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libatlas-base-dev gfortran <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-下载OpenCV"><a href="#4-下载OpenCV" class="headerlink" title="4 下载OpenCV"></a>4 下载OpenCV</h2><p>本次安装的OpenCV版本为OpenCV 4.1.0，<a href="https://opencv.org/releases/">官方链接地址</a></p><p>需要下载包括OpenCV与OpenCV_Contrib两个仓库</p><p>OpenCV_4.1.0仓库：<a href="https://github.com/opencv/opencv/tree/4.1.0">Github地址</a></p><p>OpenCV_Contrib_4.1.0仓库：<a href="https://github.com/opencv/opencv_contrib/tree/4.1.0">Github地址</a></p><p>鉴于下载速度慢，建议采用Git Bash下载：</p><p>下载命令如下，注意添加–recursive及-b 4.1.0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token number">4.1</span>.0 <span class="token parameter variable">--recursive</span> https://github.com/opencv/opencv.git<span class="token function">git</span> clone <span class="token parameter variable">-b</span> <span class="token number">4.1</span>.0 <span class="token parameter variable">--recursive</span> https://github.com/opencv/opencv_contrib.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>下载后，建议采用Fillzilla或者U盘等方法把文件传输到树莓派中。</p><p><img src="http://pic.huangruimin.tech/20190830153146.png"></p><p>当然，也可以直接在树莓派命令行窗口执行以上命令进行下载，但请确保网络稳定。</p><h2 id="5-配置Cmake"><a href="#5-配置Cmake" class="headerlink" title="5 配置Cmake"></a>5 配置Cmake</h2><p>Cmake是一款跨平台的编译工具，经过配置，可输出适配于树莓派平台的Makefile</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/pi/Downloads/opencv-4.1.0<span class="token function">mkdir</span> build<span class="token builtin class-name">cd</span> build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置Cmake，执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_BUILD_TYPE</span><span class="token operator">=</span>RELEASE <span class="token punctuation">\</span><span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_INSTALL_PREFIX</span><span class="token operator">=</span>/usr/local <span class="token punctuation">\</span><span class="token parameter variable">-D</span> <span class="token assign-left variable">INSTALL_C_EXAMPLES</span><span class="token operator">=</span>ON <span class="token punctuation">\</span><span class="token parameter variable">-D</span> <span class="token assign-left variable">INSTALL_PYTHON_EXAMPLES</span><span class="token operator">=</span>ON <span class="token punctuation">\</span><span class="token parameter variable">-D</span> <span class="token assign-left variable">OPENCV_EXTRA_MODULES_PATH</span><span class="token operator">=</span>/home/pi/Downloads/opencv-4.1.0/opencv_contrib-3.4.0/modules <span class="token punctuation">\</span><span class="token parameter variable">-D</span> <span class="token assign-left variable">BUILD_EXAMPLES</span><span class="token operator">=</span>ON <span class="token punctuation">\</span><span class="token parameter variable">-D</span> <span class="token assign-left variable">WITH_LIBV4L</span><span class="token operator">=</span>ON <span class="token punctuation">\</span><span class="token parameter variable">-D</span> <span class="token assign-left variable">PYTHON3_EXECUTABLE</span><span class="token operator">=</span>/usr/bin/python3.7 <span class="token punctuation">\</span><span class="token parameter variable">-D</span> <span class="token assign-left variable">PYTHON_INCLUDE_DIR</span><span class="token operator">=</span>/usr/include/python3.7 <span class="token punctuation">\</span><span class="token parameter variable">-D</span> <span class="token assign-left variable">PYTHON_LIBRARY</span><span class="token operator">=</span>/usr/lib/arm-linux-gnueabihf/libpython3.7m.so <span class="token punctuation">\</span><span class="token parameter variable">-D</span> <span class="token assign-left variable">PYTHON3_NUMPY_INCLUDE_DIRS</span><span class="token operator">=</span>/usr/lib/python3/dist-packages/numpy/core/include <span class="token punctuation">\</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，以上命令需要根据您具体的软件环境进行修改，否则很可能报错。<br>其中：</p><ul><li>CMAKE_BUILD_TYPE=RELEASE \ 代表编译类型为发行版本</li><li>CMAKE_INSTALL_PREFIX=/usr/local \ 安装路径</li><li>INSTALL_C_EXAMPLES=ON \ C demo</li><li>INSTALL_PYTHON_EXAMPLES=ON \ Python demo</li><li>OPENCV_EXTRA_MODULES_PATH=/home/pi/Downloads/opencv-4.1.0/opencv_contrib-3.4.0/modules \ OpenCV Contrib路径</li><li>BUILD_EXAMPLES=ON \ 编译demo</li><li>WITH_LIBV4L=ON \ 开启Video for Linux</li><li>PYTHON3_EXECUTABLE=/usr/bin/python3.7 \ Python3路径</li><li>PYTHON_INCLUDE_DIR=/usr/include/python3.7 \ Python3 include文件夹</li><li>PYTHON_LIBRARY=/usr/lib/arm-linux-gnueabihf/libpython3.7m.so \ Python3库</li><li>PYTHON3_NUMPY_INCLUDE_DIRS=/usr/lib/python3/dist-packages/numpy/core/include \ Python3 Numpy安装路径</li><li>..</li></ul><p>如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190829173935.png"></p><p>cmake 配置完成后的界面如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190829172645.png"></p><p>注意：cmake执行时间一般在15分钟左右。</p><h2 id="6-编译"><a href="#6-编译" class="headerlink" title="6 编译"></a>6 编译</h2><p>在Cmake生成Makefile之后，便可进行编译：<br>输入并执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即开始进行编译，编译过程如下图所示：<br><img src="http://pic.huangruimin.tech/20190829203241.png"></p><p>注意：make编译时间比较长，一般编译时间在5小时左右。</p><h2 id="7-安装"><a href="#7-安装" class="headerlink" title="7 安装"></a>7 安装</h2><p>输入以下命令即可进行安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">make</span> insall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：install安装时间一般在1分钟左右。</p><h2 id="8-测试是否安装完成"><a href="#8-测试是否安装完成" class="headerlink" title="8 测试是否安装完成"></a>8 测试是否安装完成</h2><p>测试包括Python及C++的测试，用到了摄像头及简单的OpenCV处理函数。</p><h3 id="8-1-Python3："><a href="#8-1-Python3：" class="headerlink" title="8.1 Python3："></a>8.1 Python3：</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span><span class="token triple-quoted-string string">'''Waveshare OpenCV Tutorial00_Test_OpenCV.pyA demo to show whether The OpenCV and CSI camera is well installed'''</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"OpenCV Version:{}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 0: use CSI camera,1：use USB camera</span>    cap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">not</span> cap<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"can't open this camera"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ret<span class="token punctuation">,</span> FrameImage <span class="token operator">=</span> cap<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ret <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment"># change to gray image</span>            GrayImage <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>FrameImage<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>            <span class="token comment"># blur the image </span>            BlurImage <span class="token operator">=</span> cv2<span class="token punctuation">.</span>blur<span class="token punctuation">(</span>GrayImage<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># use canny to detect contour</span>            CannyImage <span class="token operator">=</span> cv2<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>BlurImage<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>            <span class="token comment"># show the image</span>            cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'Camera Capture'</span><span class="token punctuation">,</span>CannyImage<span class="token punctuation">)</span>            <span class="token comment">#Press Q to quit</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                cap<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>__doc__<span class="token punctuation">)</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Release resource</span>    cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行该Python脚本的情况如下：<br><img src="http://pic.huangruimin.tech/20190830201403.png"></p><h3 id="8-2-C-："><a href="#8-2-C-：" class="headerlink" title="8.2 C++："></a>8.2 C++：</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;#include&lt;opencv2/opencv.hpp&gt;#include&lt;opencv2/highgui/highgui.hpp&gt;#include&lt;opencv2/imgproc/imgproc.hpp&gt;using namespace std;using namespace cv;int main(){cout &lt;&lt; "Waveshare OpenCV Tutorial"&lt;&lt; endl;cout &lt;&lt; "00_Test_OpenCV"&lt;&lt;endl;cout &lt;&lt; "A demo to show whether The OpenCV and CSI camera is well installed" &lt;&lt;endl;cout &lt;&lt; endl;cout &lt;&lt; "OpenCV Version:" &lt;&lt; CV_VERSION &lt;&lt; endl;// 0: use CSI camera,1：use USB cameraVideoCapture cap(0);if(!cap.isOpened()){cout&lt;&lt;"can't open this camera"&lt;&lt;endl;return -1;}Mat FrameImage,GrayImage,BlurImage,CannyImage;while(1){cap&gt;&gt;FrameImage;//Change to gray imagecvtColor(FrameImage,GrayImage,COLOR_BGR2GRAY);//blur the imageblur(GrayImage,BlurImage,Size(7,7));//use canny to detect contourCanny(BlurImage,CannyImage,3,9);//show the imageimshow("Camera Capture",CannyImage);//Press Q to quitif(char(waitKey(1)) == 'q'){break;}}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CMakeLists.txt：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">cmake_minimum_required(VERSION 3.0)project(00_Test_OpenCV)find_package(OpenCV REQUIRED)add_executable(00_Test_OpenCV 00_Test_OpenCV.cpp)target_link_libraries(00_Test_OpenCV ${OpenCV_LIBS})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译并运行：<br><img src="http://pic.huangruimin.tech/20190830201919.png"></p><h2 id="9-结语"><a href="#9-结语" class="headerlink" title="9 结语"></a>9 结语</h2><p>若中途有安装失败，或多次尝试安装失败，或者想在搭建环境的时候节省时间，可直接使用我们提供的镜像，在我们提供的镜像中，除了已安装OpenCV4.1.0之外，还安装了TensorFlow和Keras，如下图所示：</p><p><img src="http://pic.huangruimin.tech/20190830204006.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>调试专用页面</title>
      <link href="/2018/09/07/hello-world/"/>
      <url>/2018/09/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
